// Automatically generated from template - EDITS WILL BE LOST

// Generated by module.awk with options declare modulec

#ifndef __Header_modulec__
#define __Header_modulec__

class Macro_IconImageSequenceMacro : public Module {
	const char *module;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *Rows;
	Attribute *Columns;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *PixelData;
	Attribute *PlanarConfiguration;
	Attribute *PixelAspectRatio;
	Attribute *SmallestImagePixelValue;
	Attribute *LargestImagePixelValue;
	Attribute *RedPaletteColorLookupTableDescriptor;
	Attribute *GreenPaletteColorLookupTableDescriptor;
	Attribute *BluePaletteColorLookupTableDescriptor;
	Attribute *RedPaletteColorLookupTableData;
	Attribute *GreenPaletteColorLookupTableData;
	Attribute *BluePaletteColorLookupTableData;
	Attribute *ICCProfile;
public:
	            Macro_IconImageSequenceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "IconImageSequenceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CodeSequenceMacro : public Module {
	const char *module;
	Attribute *CodeValue;
	Attribute *CodingSchemeDesignator;
	Attribute *CodingSchemeVersion;
	Attribute *CodeMeaning;
	Attribute *ContextIdentifier;
	Attribute *ContextUID;
	Attribute *MappingResource;
	Attribute *ContextGroupVersion;
	Attribute *ContextGroupExtensionFlag;
	Attribute *ContextGroupLocalVersion;
	Attribute *ContextGroupExtensionCreatorUID;
public:
	            Macro_CodeSequenceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CodeSequenceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CodeSequenceMeaningOptionalMacro : public Module {
	const char *module;
	Attribute *CodeValue;
	Attribute *CodingSchemeDesignator;
	Attribute *CodingSchemeVersion;
	Attribute *CodeMeaning;
	Attribute *ContextIdentifier;
	Attribute *ContextUID;
	Attribute *MappingResource;
	Attribute *ContextGroupVersion;
	Attribute *ContextGroupExtensionFlag;
	Attribute *ContextGroupLocalVersion;
	Attribute *ContextGroupExtensionCreatorUID;
public:
	            Macro_CodeSequenceMeaningOptionalMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CodeSequenceMeaningOptionalMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CodeSequence99SDMMacro : public Module {
	const char *module;
	Attribute *CodeValue;
	Attribute *CodingSchemeDesignator;
	Attribute *CodingSchemeVersion;
	Attribute *CodeMeaning;
	Attribute *ContextIdentifier;
	Attribute *ContextUID;
	Attribute *MappingResource;
	Attribute *ContextGroupVersion;
	Attribute *ContextGroupExtensionFlag;
	Attribute *ContextGroupLocalVersion;
	Attribute *ContextGroupExtensionCreatorUID;
public:
	            Macro_CodeSequence99SDMMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CodeSequence99SDMMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PersonIdentificationMacro : public Module {
	const char *module;
	Attribute *PersonIdentificationCodeSequence;
	Attribute *PersonAddress;
	Attribute *PersonTelephoneNumbers;
	Attribute *InstitutionName;
	Attribute *InstitutionAddress;
	Attribute *InstitutionCodeSequence;
public:
	            Macro_PersonIdentificationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PersonIdentificationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ContentItemMacro : public Module {
	const char *module;
	Attribute *ValueType;
	Attribute *ConceptNameCodeSequence;
	Attribute *DateTime;
	Attribute *Date;
	Attribute *Time;
	Attribute *PersonName;
	Attribute *UID;
	Attribute *TextValue;
	Attribute *ConceptCodeSequence;
	Attribute *NumericValue;
	Attribute *MeasurementUnitsCodeSequence;
public:
	            Macro_ContentItemMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ContentItemMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ImageSOPInstanceReferenceMacro : public Module {
	const char *module;
	Attribute *ReferencedFrameNumber;
	Attribute *ReferencedSegmentNumber;
public:
	            Macro_ImageSOPInstanceReferenceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ImageSOPInstanceReferenceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_SeriesAndInstanceReferenceMacro : public Module {
	const char *module;
	Attribute *ReferencedSeriesSequence;
public:
	            Macro_SeriesAndInstanceReferenceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SeriesAndInstanceReferenceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PrimaryAnatomicStructureMacro : public Module {
	const char *module;
	Attribute *PrimaryAnatomicStructureSequence;
public:
	            Macro_PrimaryAnatomicStructureMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PrimaryAnatomicStructureMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_GeneralAnatomyMandatoryMacro : public Module {
	const char *module;
	Attribute *AnatomicRegionSequence;
	Attribute *AnatomicRegionModifierSequence;
	Attribute *PrimaryAnatomicStructureModifierSequence;
public:
	            Macro_GeneralAnatomyMandatoryMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "GeneralAnatomyMandatoryMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_GeneralAnatomyRequiredMacro : public Module {
	const char *module;
	Attribute *AnatomicRegionSequence;
	Attribute *AnatomicRegionModifierSequence;
	Attribute *PrimaryAnatomicStructureModifierSequence;
public:
	            Macro_GeneralAnatomyRequiredMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "GeneralAnatomyRequiredMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_GeneralAnatomyOptionalMacro : public Module {
	const char *module;
	Attribute *AnatomicRegionSequence;
	Attribute *AnatomicRegionModifierSequence;
	Attribute *PrimaryAnatomicStructureModifierSequence;
public:
	            Macro_GeneralAnatomyOptionalMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "GeneralAnatomyOptionalMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RequestAttributesMacro : public Module {
	const char *module;
	Attribute *RequestedProcedureID;
	Attribute *AccessionNumber;
	Attribute *IssuerOfAccessionNumberSequence;
	Attribute *StudyInstanceUID;
	Attribute *ReferencedStudySequence;
	Attribute *RequestedProcedureDescription;
	Attribute *RequestedProcedureCodeSequence;
	Attribute *ReasonForRequestedProcedure;
	Attribute *ReasonForRequestedProcedureCodeSequence;
	Attribute *ScheduledProcedureStepID;
	Attribute *ScheduledProcedureStepDescription;
	Attribute *ScheduledProtocolCodeSequence;
public:
	            Macro_RequestAttributesMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RequestAttributesMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_BasicPixelSpacingCalibrationMacro : public Module {
	const char *module;
	Attribute *PixelSpacing;
	Attribute *PixelSpacingCalibrationType;
	Attribute *PixelSpacingCalibrationDescription;
public:
	            Macro_BasicPixelSpacingCalibrationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "BasicPixelSpacingCalibrationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_SOPInstanceReferenceMacro : public Module {
	const char *module;
	Attribute *ReferencedSOPClassUID;
	Attribute *ReferencedSOPInstanceUID;
public:
	            Macro_SOPInstanceReferenceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SOPInstanceReferenceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_DisplayShutterMacro : public Module {
	const char *module;
	Attribute *ShutterShape;
	Attribute *ShutterLeftVerticalEdge;
	Attribute *ShutterRightVerticalEdge;
	Attribute *ShutterUpperHorizontalEdge;
	Attribute *ShutterLowerHorizontalEdge;
	Attribute *CenterOfCircularShutter;
	Attribute *RadiusOfCircularShutter;
	Attribute *VerticesOfPolygonalShutter;
	Attribute *ShutterPresentationValue;
	Attribute *ShutterPresentationColorCIELabValue;
public:
	            Macro_DisplayShutterMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DisplayShutterMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ContentIdentificationMacro : public Module {
	const char *module;
	Attribute *InstanceNumber;
	Attribute *ContentLabel;
	Attribute *ContentDescription;
	Attribute *ContentCreatorsName;
	Attribute *ContentCreatorsIdentificationCodeSequence;
public:
	            Macro_ContentIdentificationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ContentIdentificationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_HL7v2HierarchicDesignatorMacro : public Module {
	const char *module;
	Attribute *LocalNamespaceEntityID;
	Attribute *UniversalEntityID;
	Attribute *UniversalEntityIDType;
public:
	            Macro_HL7v2HierarchicDesignatorMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "HL7v2HierarchicDesignatorMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_IssuerOfPatientIDMacro : public Module {
	const char *module;
	Attribute *IssuerOfPatientID;
	Attribute *IssuerOfPatientIDQualifiersSequence;
public:
	            Macro_IssuerOfPatientIDMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "IssuerOfPatientIDMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_GeneralContributingSourcesMacro : public Module {
	const char *module;
	Attribute *ContributingSOPInstancesReferenceSequence;
	Attribute *Manufacturer;
	Attribute *ManufacturerModelName;
	Attribute *DeviceSerialNumber;
	Attribute *SoftwareVersion;
	Attribute *AcquisitionDateTime;
	Attribute *StationName;
	Attribute *OperatorName;
	Attribute *OperatorIdentificationSequence;
	Attribute *ProtocolName;
	Attribute *PerformedProtocolCodeSequence;
	Attribute *AcquisitionProtocolName;
public:
	            Macro_GeneralContributingSourcesMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "GeneralContributingSourcesMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ContributingImageSourcesMacro : public Module {
	const char *module;
	Attribute *Rows;
	Attribute *Columns;
	Attribute *BitsStored;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *LossyImageCompressionMethod;
public:
	            Macro_ContributingImageSourcesMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ContributingImageSourcesMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PatientOrientationMacro : public Module {
	const char *module;
	Attribute *PatientOrientationCodeSequence;
	Attribute *PatientGantryRelationshipCodeSequence;
public:
	            Macro_PatientOrientationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PatientOrientationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PerformedProcedureStepSummaryMacro : public Module {
	const char *module;
	Attribute *PerformedProcedureStepID;
	Attribute *PerformedProcedureStepStartDate;
	Attribute *PerformedProcedureStepStartTime;
	Attribute *PerformedProcedureStepDescription;
	Attribute *PerformedProtocolCodeSequence;
	Attribute *CommentsOnPerformedProcedureStep;
public:
	            Macro_PerformedProcedureStepSummaryMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PerformedProcedureStepSummaryMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_Patient : public Module {
	const char *module;
	Attribute *PatientName;
	Attribute *PatientID;
	Attribute *PatientBirthDate;
	Attribute *PatientSex;
	Attribute *ReferencedPatientSequence;
	Attribute *PatientBirthTime;
	Attribute *OtherPatientID;
	Attribute *OtherPatientIDSequence;
	Attribute *OtherPatientName;
	Attribute *EthnicGroup;
	Attribute *PatientComments;
	Attribute *PatientSpeciesDescription;
	Attribute *PatientSpeciesCodeSequence;
	Attribute *PatientBreedDescription;
	Attribute *PatientBreedCodeSequence;
	Attribute *BreedRegistrationSequence;
	Attribute *ResponsiblePerson;
	Attribute *ResponsiblePersonRole;
	Attribute *ResponsibleOrganization;
	Attribute *PatientIdentityRemoved;
	Attribute *DeidentificationMethod;
	Attribute *DeidentificationMethodCodeSequence;
public:
	            Module_Patient(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "Patient"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ClinicalTrialSubject : public Module {
	const char *module;
	Attribute *ClinicalTrialSponsorName;
	Attribute *ClinicalTrialProtocolID;
	Attribute *ClinicalTrialProtocolName;
	Attribute *ClinicalTrialSiteID;
	Attribute *ClinicalTrialSiteName;
	Attribute *ClinicalTrialSubjectID;
	Attribute *ClinicalTrialSubjectReadingID;
public:
	            Module_ClinicalTrialSubject(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ClinicalTrialSubject"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_GeneralStudy : public Module {
	const char *module;
	Attribute *StudyInstanceUID;
	Attribute *StudyDate;
	Attribute *StudyTime;
	Attribute *ReferringPhysicianName;
	Attribute *ReferringPhysicianIdentificationSequence;
	Attribute *StudyID;
	Attribute *AccessionNumber;
	Attribute *IssuerOfAccessionNumberSequence;
	Attribute *StudyDescription;
	Attribute *PhysicianOfRecord;
	Attribute *PhysicianOfRecordIdentificationSequence;
	Attribute *PhysicianReadingStudy;
	Attribute *PhysicianReadingStudyIdentificationSequence;
	Attribute *ReferencedStudySequence;
	Attribute *ProcedureCodeSequence;
public:
	            Module_GeneralStudy(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "GeneralStudy"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PatientStudy : public Module {
	const char *module;
	Attribute *AdmittingDiagnosesDescription;
	Attribute *AdmittingDiagnosesCodeSequence;
	Attribute *PatientAge;
	Attribute *PatientSize;
	Attribute *PatientWeight;
	Attribute *Occupation;
	Attribute *AdditionalPatientHistory;
	Attribute *AdmissionID;
	Attribute *IssuerOfAdmissionID;
	Attribute *IssuerOfAdmissionIDSequence;
	Attribute *ServiceEpisodeID;
	Attribute *IssuerOfServiceEpisodeIDSequence;
	Attribute *ServiceEpisodeDescription;
	Attribute *PatientSexNeutered;
public:
	            Module_PatientStudy(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PatientStudy"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ClinicalTrialStudy : public Module {
	const char *module;
	Attribute *ClinicalTrialTimePointID;
	Attribute *ClinicalTrialTimePointDescription;
public:
	            Module_ClinicalTrialStudy(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ClinicalTrialStudy"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_GeneralSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *SeriesInstanceUID;
	Attribute *SeriesNumber;
	Attribute *Laterality;
	Attribute *SeriesDate;
	Attribute *SeriesTime;
	Attribute *PerformingPhysicianName;
	Attribute *PerformingPhysicianIdentificationSequence;
	Attribute *ProtocolName;
	Attribute *SeriesDescription;
	Attribute *OperatorName;
	Attribute *OperatorIdentificationSequence;
	Attribute *ReferencedPerformedProcedureStepSequence;
	Attribute *RelatedSeriesSequence;
	Attribute *BodyPartExamined;
	Attribute *PatientPosition;
	Attribute *SmallestPixelValueInSeries;
	Attribute *LargestPixelValueInSeries;
	Attribute *RequestAttributesSequence;
public:
	            Module_GeneralSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "GeneralSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ClinicalTrialSeries : public Module {
	const char *module;
	Attribute *ClinicalTrialCoordinatingCenterName;
	Attribute *ClinicalTrialSeriesID;
	Attribute *ClinicalTrialSeriesDescription;
public:
	            Module_ClinicalTrialSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ClinicalTrialSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EnhancedSeries : public Module {
	const char *module;
	Attribute *SeriesNumber;
	Attribute *ReferencedPerformedProcedureStepSequence;
public:
	            Module_EnhancedSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EnhancedSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_FrameOfReference : public Module {
	const char *module;
	Attribute *FrameOfReferenceUID;
	Attribute *PositionReferenceIndicator;
public:
	            Module_FrameOfReference(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "FrameOfReference"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_GeneralEquipment : public Module {
	const char *module;
	Attribute *Manufacturer;
	Attribute *InstitutionName;
	Attribute *InstitutionAddress;
	Attribute *StationName;
	Attribute *InstitutionalDepartmentName;
	Attribute *ManufacturerModelName;
	Attribute *DeviceSerialNumber;
	Attribute *SoftwareVersion;
	Attribute *GantryID;
	Attribute *SpatialResolution;
	Attribute *DateOfLastCalibration;
	Attribute *TimeOfLastCalibration;
	Attribute *PixelPaddingValue;
public:
	            Module_GeneralEquipment(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "GeneralEquipment"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EnhancedGeneralEquipment : public Module {
	const char *module;
	Attribute *Manufacturer;
	Attribute *ManufacturerModelName;
	Attribute *DeviceSerialNumber;
	Attribute *SoftwareVersion;
public:
	            Module_EnhancedGeneralEquipment(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EnhancedGeneralEquipment"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_GeneralImage : public Module {
	const char *module;
	Attribute *InstanceNumber;
	Attribute *PatientOrientation;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *ImageType;
	Attribute *AcquisitionNumber;
	Attribute *AcquisitionDate;
	Attribute *AcquisitionTime;
	Attribute *AcquisitionDateTime;
	Attribute *ReferencedImageSequence;
	Attribute *DerivationDescription;
	Attribute *DerivationCodeSequence;
	Attribute *SourceImageSequence;
	Attribute *ReferencedInstanceSequence;
	Attribute *ImagesInAcquisition;
	Attribute *ImageComments;
	Attribute *QualityControlImage;
	Attribute *BurnedInAnnotation;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *LossyImageCompressionMethod;
	Attribute *IconImageSequence;
	Attribute *PresentationLUTShape;
	Attribute *IrradiationEventUID;
public:
	            Module_GeneralImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "GeneralImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ImagePlane : public Module {
	const char *module;
	Attribute *PixelSpacing;
	Attribute *ImageOrientationPatient;
	Attribute *ImagePositionPatient;
	Attribute *SliceThickness;
	Attribute *SliceLocation;
public:
	            Module_ImagePlane(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ImagePlane"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ImagePixelMacro : public Module {
	const char *module;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *Rows;
	Attribute *Columns;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *PixelData;
	Attribute *PlanarConfiguration;
	Attribute *PixelAspectRatio;
	Attribute *SmallestImagePixelValue;
	Attribute *LargestImagePixelValue;
	Attribute *RedPaletteColorLookupTableDescriptor;
	Attribute *GreenPaletteColorLookupTableDescriptor;
	Attribute *BluePaletteColorLookupTableDescriptor;
	Attribute *RedPaletteColorLookupTableData;
	Attribute *GreenPaletteColorLookupTableData;
	Attribute *BluePaletteColorLookupTableData;
	Attribute *ICCProfile;
public:
	            Macro_ImagePixelMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ImagePixelMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ImagePixel : public Module {
	const char *module;
	Attribute *PixelDataProviderURL;
	Attribute *PixelPaddingRangeLimit;
public:
	            Module_ImagePixel(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ImagePixel"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ContrastBolus : public Module {
	const char *module;
	Attribute *ContrastBolusAgent;
	Attribute *ContrastBolusAgentSequence;
	Attribute *ContrastBolusRoute;
	Attribute *ContrastBolusAdministrationRouteSequence;
	Attribute *ContrastBolusVolume;
	Attribute *ContrastBolusStartTime;
	Attribute *ContrastBolusStopTime;
	Attribute *ContrastBolusTotalDose;
	Attribute *ContrastFlowRate;
	Attribute *ContrastFlowDuration;
	Attribute *ContrastBolusIngredient;
	Attribute *ContrastBolusIngredientConcentration;
public:
	            Module_ContrastBolus(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ContrastBolus"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EnhancedContrastBolus : public Module {
	const char *module;
	Attribute *ContrastBolusAgentSequence;
public:
	            Module_EnhancedContrastBolus(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EnhancedContrastBolus"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_Cine : public Module {
	const char *module;
	Attribute *PreferredPlaybackSequencing;
	Attribute *FrameTime;
	Attribute *FrameTimeVector;
	Attribute *StartTrim;
	Attribute *StopTrim;
	Attribute *RecommendedDisplayFrameRate;
	Attribute *CineRate;
	Attribute *FrameDelay;
	Attribute *ImageTriggerDelay;
	Attribute *EffectiveDuration;
	Attribute *ActualFrameDuration;
	Attribute *MultiplexedAudioChannelsDescriptionCodeSequence;
public:
	            Module_Cine(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "Cine"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrame : public Module {
	const char *module;
	Attribute *NumberOfFrames;
	Attribute *FrameIncrementPointer;
public:
	            Module_MultiFrame(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrame"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsCommon : public Module {
	const char *module;
	Attribute *InstanceNumber;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *NumberOfFrames;
	Attribute *ConcatenationFrameOffsetNumber;
	Attribute *RepresentativeFrameNumber;
	Attribute *ConcatenationUID;
	Attribute *InConcatenationNumber;
	Attribute *InConcatenationTotalNumber;
public:
	            Module_MultiFrameFunctionalGroupsCommon(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsCommon"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PixelMeasuresMacro : public Module {
	const char *module;
	Attribute *PixelMeasuresSequence;
public:
	            Macro_PixelMeasuresMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PixelMeasuresMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_FrameContentMacro : public Module {
	const char *module;
	Attribute *FrameContentSequence;
public:
	            Macro_FrameContentMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "FrameContentMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PlanePositionMacro : public Module {
	const char *module;
	Attribute *PlanePositionSequence;
public:
	            Macro_PlanePositionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PlanePositionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PlaneOrientationMacro : public Module {
	const char *module;
	Attribute *PlaneOrientationSequence;
public:
	            Macro_PlaneOrientationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PlaneOrientationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ReferencedImageMacro : public Module {
	const char *module;
	Attribute *ReferencedImageSequence;
public:
	            Macro_ReferencedImageMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ReferencedImageMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_DerivationImageMacro : public Module {
	const char *module;
	Attribute *DerivationImageSequence;
public:
	            Macro_DerivationImageMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DerivationImageMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CardiacSynchronizationMacro : public Module {
	const char *module;
	Attribute *CardiacSynchronizationSequence;
public:
	            Macro_CardiacSynchronizationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CardiacSynchronizationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_FrameAnatomyMacro : public Module {
	const char *module;
	Attribute *FrameAnatomySequence;
public:
	            Macro_FrameAnatomyMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "FrameAnatomyMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PixelValueTransformationMacro : public Module {
	const char *module;
	Attribute *PixelValueTransformationSequence;
public:
	            Macro_PixelValueTransformationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PixelValueTransformationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_FrameVOILUTMacro : public Module {
	const char *module;
	Attribute *FrameVOILUTSequence;
public:
	            Macro_FrameVOILUTMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "FrameVOILUTMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RealWorldValueMappingMacro : public Module {
	const char *module;
	Attribute *RealWorldValueMappingSequence;
public:
	            Macro_RealWorldValueMappingMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RealWorldValueMappingMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ContrastBolusUsageMacro : public Module {
	const char *module;
	Attribute *ContrastBolusUsageSequence;
public:
	            Macro_ContrastBolusUsageMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ContrastBolusUsageMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PixelIntensityRelationshipLUTMacro : public Module {
	const char *module;
	Attribute *PixelIntensityRelationshipLUTSequence;
public:
	            Macro_PixelIntensityRelationshipLUTMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PixelIntensityRelationshipLUTMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_FramePixelShiftMacro : public Module {
	const char *module;
	Attribute *FramePixelShiftSequence;
public:
	            Macro_FramePixelShiftMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "FramePixelShiftMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PatientOrientationInFrameMacro : public Module {
	const char *module;
	Attribute *PatientOrientationInFrameSequence;
public:
	            Macro_PatientOrientationInFrameMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PatientOrientationInFrameMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_FrameDisplayShutterMacro : public Module {
	const char *module;
	Attribute *FrameDisplayShutterSequence;
public:
	            Macro_FrameDisplayShutterMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "FrameDisplayShutterMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RespiratorySynchronizationMacro : public Module {
	const char *module;
	Attribute *RespiratorySynchronizationSequence;
public:
	            Macro_RespiratorySynchronizationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RespiratorySynchronizationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_IrradiationEventIdentificationMacro : public Module {
	const char *module;
	Attribute *IrradiationEventIdentificationSequence;
public:
	            Macro_IrradiationEventIdentificationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "IrradiationEventIdentificationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RadiopharmaceuticalUsageMacro : public Module {
	const char *module;
	Attribute *RadiopharmaceuticalUsageSequence;
public:
	            Macro_RadiopharmaceuticalUsageMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RadiopharmaceuticalUsageMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PatientPhysiologicalStateMacro : public Module {
	const char *module;
	Attribute *PatientPhysiologicalStateSequence;
public:
	            Macro_PatientPhysiologicalStateMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PatientPhysiologicalStateMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameDimension : public Module {
	const char *module;
	Attribute *DimensionOrganizationSequence;
	Attribute *DimensionIndexSequence;
public:
	            Module_MultiFrameDimension(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameDimension"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_CardiacSynchronization : public Module {
	const char *module;
	Attribute *CardiacSynchronizationTechnique;
	Attribute *CardiacSignalSource;
	Attribute *CardiacRRIntervalSpecified;
	Attribute *CardiacBeatRejectionTechnique;
	Attribute *LowRRValue;
	Attribute *HighRRValue;
	Attribute *IntervalsAcquired;
	Attribute *IntervalsRejected;
	Attribute *SkipBeats;
	Attribute *CardiacFramingType;
public:
	            Module_CardiacSynchronization(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CardiacSynchronization"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RespiratorySynchronization : public Module {
	const char *module;
	Attribute *RespiratoryMotionCompensationTechnique;
	Attribute *RespiratorySignalSource;
	Attribute *RespiratoryTriggerDelayThreshold;
	Attribute *RespiratoryTriggerType;
public:
	            Module_RespiratorySynchronization(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RespiratorySynchronization"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_BulkMotionSynchronization : public Module {
	const char *module;
	Attribute *BulkMotionCompensationTechnique;
	Attribute *BulkMotionSignalSource;
public:
	            Module_BulkMotionSynchronization(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "BulkMotionSynchronization"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SupplementalPaletteColorLUT : public Module {
	const char *module;
	Attribute *RedPaletteColorLookupTableDescriptor;
	Attribute *GreenPaletteColorLookupTableDescriptor;
	Attribute *BluePaletteColorLookupTableDescriptor;
	Attribute *RedPaletteColorLookupTableData;
	Attribute *GreenPaletteColorLookupTableData;
	Attribute *BluePaletteColorLookupTableData;
public:
	            Module_SupplementalPaletteColorLUT(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SupplementalPaletteColorLUT"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PaletteColorLookupTable : public Module {
	const char *module;
	Attribute *RedPaletteColorLookupTableDescriptor;
	Attribute *GreenPaletteColorLookupTableDescriptor;
	Attribute *BluePaletteColorLookupTableDescriptor;
	Attribute *PaletteColorLookupTableUID;
	Attribute *RedPaletteColorLookupTableData;
	Attribute *GreenPaletteColorLookupTableData;
	Attribute *BluePaletteColorLookupTableData;
	Attribute *SegmentedRedPaletteColorLookupTableData;
	Attribute *SegmentedGreenPaletteColorLookupTableData;
	Attribute *SegmentedBluePaletteColorLookupTableData;
public:
	            Module_PaletteColorLookupTable(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PaletteColorLookupTable"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PatientOrientation : public Module {
	const char *module;
public:
	            Module_PatientOrientation(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PatientOrientation"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ImageEquipmentCoordinateRelationship : public Module {
	const char *module;
	Attribute *ImageToEquipmentMappingMatrix;
	Attribute *EquipmentCoordinateSystemIdentification;
public:
	            Module_ImageEquipmentCoordinateRelationship(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ImageEquipmentCoordinateRelationship"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_CRSeries : public Module {
	const char *module;
	Attribute *BodyPartExamined;
	Attribute *ViewPosition;
	Attribute *FilterType;
	Attribute *CollimatorGridName;
	Attribute *FocalSpot;
	Attribute *PlateType;
	Attribute *PhosphorType;
public:
	            Module_CRSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CRSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_CRImage : public Module {
	const char *module;
	Attribute *PhotometricInterpretation;
	Attribute *KVP;
	Attribute *PlateID;
	Attribute *DistanceSourceToDetector;
	Attribute *DistanceSourceToPatient;
	Attribute *ExposureTime;
	Attribute *XRayTubeCurrent;
	Attribute *Exposure;
	Attribute *ExposureInuAs;
	Attribute *ImagerPixelSpacing;
	Attribute *GeneratorPower;
	Attribute *AcquisitionDeviceProcessingDescription;
	Attribute *AcquisitionDeviceProcessingCode;
	Attribute *CassetteOrientation;
	Attribute *CassetteSize;
	Attribute *ExposuresOnPlate;
	Attribute *RelativeXRayExposure;
	Attribute *Sensitivity;
public:
	            Module_CRImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CRImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_CTImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *RescaleIntercept;
	Attribute *RescaleSlope;
	Attribute *KVP;
	Attribute *AcquisitionNumber;
	Attribute *ScanOptions;
	Attribute *DataCollectionDiameter;
	Attribute *DataCollectionCenterPatient;
	Attribute *ReconstructionDiameter;
	Attribute *ReconstructionTargetCenterPatient;
	Attribute *DistanceSourceToDetector;
	Attribute *DistanceSourceToPatient;
	Attribute *GantryDetectorTilt;
	Attribute *TableHeight;
	Attribute *RotationDirection;
	Attribute *ExposureTime;
	Attribute *XRayTubeCurrent;
	Attribute *Exposure;
	Attribute *ExposureInuAs;
	Attribute *FilterType;
	Attribute *GeneratorPower;
	Attribute *FocalSpot;
	Attribute *ConvolutionKernel;
	Attribute *RevolutionTime;
	Attribute *SingleCollimationWidth;
	Attribute *TotalCollimationWidth;
	Attribute *TableSpeed;
	Attribute *TableFeedPerRotation;
	Attribute *SpiralPitchFactor;
	Attribute *ExposureModulationType;
	Attribute *EstimatedDoseSaving;
	Attribute *CTDIvol;
	Attribute *CTDIPhantomTypeCodeSequence;
	Attribute *CalciumScoringMassFactorPatient;
	Attribute *CalciumScoringMassFactorDevice;
	Attribute *CTAdditionalXRaySourceSequence;
public:
	            Module_CTImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MRImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *ScanningSequence;
	Attribute *SequenceVariant;
	Attribute *ScanOptions;
	Attribute *MRAcquisitionType;
	Attribute *RepetitionTime;
	Attribute *EchoTime;
	Attribute *EchoTrainLength;
	Attribute *InversionTime;
	Attribute *TriggerTime;
	Attribute *SequenceName;
	Attribute *AngioFlag;
	Attribute *NumberOfAverages;
	Attribute *ImagingFrequency;
	Attribute *ImagedNucleus;
	Attribute *EchoNumber;
	Attribute *MagneticFieldStrength;
	Attribute *SpacingBetweenSlices;
	Attribute *NumberOfPhaseEncodingSteps;
	Attribute *PercentSampling;
	Attribute *PercentPhaseFieldOfView;
	Attribute *PixelBandwidth;
	Attribute *NominalInterval;
	Attribute *BeatRejectionFlag;
	Attribute *LowRRValue;
	Attribute *HighRRValue;
	Attribute *IntervalsAcquired;
	Attribute *IntervalsRejected;
	Attribute *PVCRejection;
	Attribute *SkipBeats;
	Attribute *HeartRate;
	Attribute *CardiacNumberOfImages;
	Attribute *TriggerWindow;
	Attribute *ReconstructionDiameter;
	Attribute *ReceiveCoilName;
	Attribute *TransmitCoilName;
	Attribute *AcquisitionMatrix;
	Attribute *InPlanePhaseEncodingDirection;
	Attribute *FlipAngle;
	Attribute *SAR;
	Attribute *VariableFlipAngleFlag;
	Attribute *dBdt;
	Attribute *TemporalPositionIdentifier;
	Attribute *NumberOfTemporalPositions;
	Attribute *TemporalResolution;
public:
	            Module_MRImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_NMPETPatientOrientation : public Module {
	const char *module;
	Attribute *PatientOrientationCodeSequence;
	Attribute *PatientGantryRelationshipCodeSequence;
public:
	            Module_NMPETPatientOrientation(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NMPETPatientOrientation"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_NMImagePixel : public Module {
	const char *module;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelSpacing;
public:
	            Module_NMImagePixel(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NMImagePixel"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_NMMultiFrame : public Module {
	const char *module;
	Attribute *FrameIncrementPointer;
	Attribute *EnergyWindowVector;
	Attribute *NumberOfEnergyWindows;
	Attribute *DetectorVector;
	Attribute *NumberOfDetectors;
	Attribute *PhaseVector;
	Attribute *NumberOfPhases;
	Attribute *RotationVector;
	Attribute *NumberOfRotations;
	Attribute *RRIntervalVector;
	Attribute *NumberOfRRIntervals;
	Attribute *TimeSlotVector;
	Attribute *NumberOfTimeSlots;
	Attribute *SliceVector;
	Attribute *NumberOfSlices;
	Attribute *AngularViewVector;
	Attribute *TimeSliceVector;
public:
	            Module_NMMultiFrame(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NMMultiFrame"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_NMImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *ImageID;
	Attribute *LossyImageCompression;
	Attribute *CountsAccumulated;
	Attribute *AcquisitionTerminationCondition;
	Attribute *TableHeight;
	Attribute *TableTraverse;
	Attribute *ActualFrameDuration;
	Attribute *CountRate;
	Attribute *ProcessingFunction;
	Attribute *CorrectedImage;
	Attribute *WholeBodyTechnique;
	Attribute *ScanVelocity;
	Attribute *ScanLength;
	Attribute *TriggerSourceOrType;
	Attribute *ReferencedImageRealWorldValueMappingSequence;
public:
	            Module_NMImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NMImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_NMIsotope : public Module {
	const char *module;
	Attribute *EnergyWindowInformationSequence;
	Attribute *RadiopharmaceuticalInformationSequence;
	Attribute *InterventionDrugInformationSequence;
public:
	            Module_NMIsotope(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NMIsotope"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_NMDetector : public Module {
	const char *module;
	Attribute *DetectorInformationSequence;
public:
	            Module_NMDetector(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NMDetector"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_NMTomoAcquisition : public Module {
	const char *module;
	Attribute *RotationInformationSequence;
	Attribute *TypeOfDetectorMotion;
public:
	            Module_NMTomoAcquisition(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NMTomoAcquisition"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_NMMultiGatedAcquisition : public Module {
	const char *module;
	Attribute *BeatRejectionFlag;
	Attribute *PVCRejection;
	Attribute *SkipBeats;
	Attribute *HeartRate;
	Attribute *GatedInformationSequence;
public:
	            Module_NMMultiGatedAcquisition(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NMMultiGatedAcquisition"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_NMPhase : public Module {
	const char *module;
	Attribute *PhaseInformationSequence;
public:
	            Module_NMPhase(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NMPhase"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_NMReconstruction : public Module {
	const char *module;
	Attribute *SpacingBetweenSlices;
	Attribute *ReconstructionDiameter;
	Attribute *ConvolutionKernel;
	Attribute *SliceThickness;
	Attribute *SliceLocation;
	Attribute *SliceProgressionDirection;
public:
	            Module_NMReconstruction(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NMReconstruction"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_USRegionCalibration : public Module {
	const char *module;
	Attribute *SequenceOfUltrasoundRegions;
public:
	            Module_USRegionCalibration(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "USRegionCalibration"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_USImage : public Module {
	const char *module;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PlanarConfiguration;
	Attribute *PixelRepresentation;
	Attribute *FrameIncrementPointer;
	Attribute *ImageType;
	Attribute *LossyImageCompression;
	Attribute *NumberOfStages;
	Attribute *NumberOfViewsInStage;
	Attribute *RWaveTimeVector;
	Attribute *UltrasoundColorDataPresent;
	Attribute *StageName;
	Attribute *StageCodeSequence;
	Attribute *StageNumber;
	Attribute *ViewName;
	Attribute *ViewNumber;
	Attribute *NumberOfEventTimers;
	Attribute *EventElapsedTime;
	Attribute *EventTimerName;
	Attribute *ViewCodeSequence;
	Attribute *AcquisitionDateTime;
	Attribute *TriggerTime;
	Attribute *NominalInterval;
	Attribute *BeatRejectionFlag;
	Attribute *LowRRValue;
	Attribute *HighRRValue;
	Attribute *HeartRate;
	Attribute *IVUSAcquisition;
	Attribute *IVUSPullbackRate;
	Attribute *IVUSGatedRate;
	Attribute *IVUSPullbackStartFrameNumber;
	Attribute *IVUSPullbackStopFrameNumber;
	Attribute *LesionNumber;
	Attribute *OutputPower;
	Attribute *TransducerData;
	Attribute *TransducerType;
	Attribute *FocusDepth;
	Attribute *ProcessingFunction;
	Attribute *MechanicalIndex;
	Attribute *BoneThermalIndex;
	Attribute *CranialThermalIndex;
	Attribute *SoftTissueThermalIndex;
	Attribute *SoftTissueFocusThermalIndex;
	Attribute *SoftTissueSurfaceThermalIndex;
	Attribute *DepthOfScanField;
	Attribute *OverlaySubtype;
public:
	            Module_USImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "USImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SCEquipment : public Module {
	const char *module;
	Attribute *ConversionType;
	Attribute *Modality;
	Attribute *SecondaryCaptureDeviceID;
	Attribute *SecondaryCaptureDeviceManufacturer;
	Attribute *SecondaryCaptureDeviceManufacturerModelName;
	Attribute *SecondaryCaptureDeviceSoftwareVersion;
	Attribute *VideoImageFormatAcquired;
	Attribute *DigitalImageFormatAcquired;
public:
	            Module_SCEquipment(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SCEquipment"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SCImage : public Module {
	const char *module;
	Attribute *DateOfSecondaryCapture;
	Attribute *TimeOfSecondaryCapture;
	Attribute *NominalScannedPixelSpacing;
public:
	            Module_SCImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SCImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SCMultiFrameImage : public Module {
	const char *module;
	Attribute *BurnedInAnnotation;
	Attribute *PresentationLUTShape;
	Attribute *Illumination;
	Attribute *ReflectedAmbientLight;
	Attribute *RescaleIntercept;
	Attribute *RescaleSlope;
	Attribute *RescaleType;
	Attribute *FrameIncrementPointer;
	Attribute *NominalScannedPixelSpacing;
	Attribute *DigitizingDeviceTransportDirection;
	Attribute *RotationOfScannedFilm;
public:
	            Module_SCMultiFrameImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SCMultiFrameImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SCMultiFrameVector : public Module {
	const char *module;
	Attribute *FrameTimeVector;
	Attribute *PageNumberVector;
	Attribute *FrameLabelVector;
	Attribute *FramePrimaryAngleVector;
	Attribute *FrameSecondaryAngleVector;
	Attribute *SliceLocationVector;
	Attribute *DisplayWindowLabelVector;
public:
	            Module_SCMultiFrameVector(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SCMultiFrameVector"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OverlayPlane : public Module {
	const char *module;
	Attribute *OverlayRows;
	Attribute *OverlayColumns;
	Attribute *OverlayType;
	Attribute *OverlayOrigin;
	Attribute *OverlayBitsAllocated;
	Attribute *OverlayBitPosition;
	Attribute *OverlayData;
	Attribute *OverlayDescription;
	Attribute *OverlaySubtype;
	Attribute *OverlayLabel;
	Attribute *ROIArea;
	Attribute *ROIMean;
	Attribute *ROIStandardDeviation;
public:
	            Module_OverlayPlane(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OverlayPlane"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameOverlay : public Module {
	const char *module;
	Attribute *NumberOfFramesInOverlay;
	Attribute *ImageFrameOrigin;
public:
	            Module_MultiFrameOverlay(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameOverlay"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ModalityLUTMacro : public Module {
	const char *module;
	Attribute *ModalityLUTSequence;
	Attribute *RescaleIntercept;
	Attribute *RescaleSlope;
	Attribute *RescaleType;
public:
	            Macro_ModalityLUTMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ModalityLUTMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ModalityLUT : public Module {
	const char *module;
public:
	            Module_ModalityLUT(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ModalityLUT"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_VOILUTMacro : public Module {
	const char *module;
	Attribute *VOILUTSequence;
	Attribute *WindowCenter;
	Attribute *WindowWidth;
	Attribute *WindowCenterWidthExplanation;
	Attribute *VOILUTFunction;
public:
	            Macro_VOILUTMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "VOILUTMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_VOILUT : public Module {
	const char *module;
public:
	            Module_VOILUT(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "VOILUT"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_DigitalSignaturesMacro : public Module {
	const char *module;
	Attribute *MACParametersSequence;
	Attribute *DigitalSignaturesSequence;
public:
	            Macro_DigitalSignaturesMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DigitalSignaturesMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SOPCommon : public Module {
	const char *module;
	Attribute *SOPClassUID;
	Attribute *SOPInstanceUID;
	Attribute *SpecificCharacterSet;
	Attribute *InstanceCreationDate;
	Attribute *InstanceCreationTime;
	Attribute *InstanceCreatorUID;
	Attribute *RelatedGeneralSOPClassUID;
	Attribute *OriginalSpecializedSOPClassUID;
	Attribute *CodingSchemeIdentificationSequence;
	Attribute *TimezoneOffsetFromUTC;
	Attribute *ContributingEquipmentSequence;
	Attribute *InstanceNumber;
	Attribute *SOPInstanceStatus;
	Attribute *SOPAuthorizationDateAndTime;
	Attribute *SOPAuthorizationComment;
	Attribute *AuthorizationEquipmentCertificationNumber;
	Attribute *EncryptedAttributesSequence;
	Attribute *OriginalAttributesSequence;
	Attribute *HL7StructuredDocumentReferenceSequence;
public:
	            Module_SOPCommon(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SOPCommon"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiframeSingleBitSCImagePseudo : public Module {
	const char *module;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *PlanarConfiguration;
public:
	            Module_MultiframeSingleBitSCImagePseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiframeSingleBitSCImagePseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiframeGrayscaleByteSCImagePseudo : public Module {
	const char *module;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *PlanarConfiguration;
public:
	            Module_MultiframeGrayscaleByteSCImagePseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiframeGrayscaleByteSCImagePseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiframeGrayscaleWordSCImagePseudo : public Module {
	const char *module;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *PlanarConfiguration;
public:
	            Module_MultiframeGrayscaleWordSCImagePseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiframeGrayscaleWordSCImagePseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiframeTrueColorSCImagePseudo : public Module {
	const char *module;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *PlanarConfiguration;
public:
	            Module_MultiframeTrueColorSCImagePseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiframeTrueColorSCImagePseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_CommonInstanceReference : public Module {
	const char *module;
	Attribute *ReferencedSeriesSequence;
	Attribute *StudiesContainingOtherReferencedInstancesSequence;
public:
	            Module_CommonInstanceReference(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CommonInstanceReference"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SegmentationSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *SeriesNumber;
	Attribute *ReferencedPerformedProcedureStepSequence;
public:
	            Module_SegmentationSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SegmentationSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SegmentationImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *PixelRepresentation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PlanarConfiguration;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *LossyImageCompressionMethod;
	Attribute *SegmentationType;
	Attribute *SegmentationFractionalType;
	Attribute *MaximumFractionalValue;
	Attribute *SegmentSequence;
public:
	            Module_SegmentationImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SegmentationImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_SegmentationMacro : public Module {
	const char *module;
	Attribute *SegmentIdentificationSequence;
public:
	            Macro_SegmentationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SegmentationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsForSegmentation : public Module {
	const char *module;
	Attribute *SharedFunctionalGroupsSequence;
	Attribute *PerFrameFunctionalGroupsSequence;
public:
	            Module_MultiFrameFunctionalGroupsForSegmentation(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsForSegmentation"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SpatialRegistrationSeries : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_SpatialRegistrationSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SpatialRegistrationSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SpatialRegistration : public Module {
	const char *module;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *RegistrationSequence;
public:
	            Module_SpatialRegistration(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SpatialRegistration"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DeformableSpatialRegistration : public Module {
	const char *module;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *DeformableRegistrationSequence;
public:
	            Module_DeformableSpatialRegistration(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DeformableSpatialRegistration"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SpatialFiducialsSeries : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_SpatialFiducialsSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SpatialFiducialsSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SpatialFiducials : public Module {
	const char *module;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *FiducialSetSequence;
public:
	            Module_SpatialFiducials(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SpatialFiducials"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EncapsulatedDocumentSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *SeriesInstanceUID;
	Attribute *SeriesNumber;
	Attribute *ReferencedPerformedProcedureStepSequence;
	Attribute *SeriesDescription;
	Attribute *RequestAttributesSequence;
public:
	            Module_EncapsulatedDocumentSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EncapsulatedDocumentSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EncapsulatedDocument : public Module {
	const char *module;
	Attribute *InstanceNumber;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *AcquisitionDateTime;
	Attribute *BurnedInAnnotation;
	Attribute *SourceInstanceSequence;
	Attribute *DocumentTitle;
	Attribute *ConceptNameCodeSequence;
	Attribute *VerificationFlag;
	Attribute *HL7InstanceIdentifier;
	Attribute *MIMETypeOfEncapsulatedDocument;
	Attribute *ListOfMIMETypes;
	Attribute *EncapsulatedDocument;
public:
	            Module_EncapsulatedDocument(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EncapsulatedDocument"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EncapsulatedDocumentPDFPseudo : public Module {
	const char *module;
	Attribute *MIMETypeOfEncapsulatedDocument;
public:
	            Module_EncapsulatedDocumentPDFPseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EncapsulatedDocumentPDFPseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EncapsulatedDocumentCDAPseudo : public Module {
	const char *module;
	Attribute *MIMETypeOfEncapsulatedDocument;
public:
	            Module_EncapsulatedDocumentCDAPseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EncapsulatedDocumentCDAPseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_CheckSingleFramePseudo : public Module {
	const char *module;
	Attribute *NumberOfFrames;
public:
	            Module_CheckSingleFramePseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CheckSingleFramePseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RealWorldValueMappingSeries : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_RealWorldValueMappingSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RealWorldValueMappingSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RealWorldValueMapping : public Module {
	const char *module;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *ReferencedImageRealWorldValueMappingSequence;
public:
	            Module_RealWorldValueMapping(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RealWorldValueMapping"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_FileMetaInformation : public Module {
	const char *module;
	Attribute *FileMetaInformationGroupLength;
	Attribute *FileMetaInformationVersion;
	Attribute *MediaStorageSOPClassUID;
	Attribute *MediaStorageSOPInstanceUID;
	Attribute *TransferSyntaxUID;
	Attribute *ImplementationClassUID;
	Attribute *ImplementationVersionName;
	Attribute *SourceApplicationEntityTitle;
	Attribute *PrivateInformationCreatorUID;
	Attribute *PrivateInformation;
public:
	            Module_FileMetaInformation(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "FileMetaInformation"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_FileSetIdentification : public Module {
	const char *module;
	Attribute *FileSetID;
	Attribute *FileSetDescriptorFileID;
	Attribute *FileSetCharacterSet;
public:
	            Module_FileSetIdentification(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "FileSetIdentification"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DirectoryInformation : public Module {
	const char *module;
	Attribute *RootDirectoryFirstRecord;
	Attribute *RootDirectoryLastRecord;
	Attribute *FileSetConsistencyFlag;
	Attribute *DirectoryRecordSequence;
public:
	            Module_DirectoryInformation(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DirectoryInformation"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PatientDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *PatientName;
	Attribute *PatientID;
public:
	            Macro_PatientDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PatientDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_StudyDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *StudyDate;
	Attribute *StudyTime;
	Attribute *StudyDescription;
	Attribute *StudyInstanceUID;
	Attribute *StudyID;
	Attribute *AccessionNumber;
public:
	            Macro_StudyDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "StudyDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_SeriesDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *Modality;
	Attribute *SeriesInstanceUID;
	Attribute *SeriesNumber;
	Attribute *IconImageSequence;
public:
	            Macro_SeriesDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SeriesDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ImageDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *InstanceNumber;
	Attribute *IconImageSequence;
public:
	            Macro_ImageDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ImageDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RTDoseDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *InstanceNumber;
	Attribute *DoseSummationType;
	Attribute *DoseComment;
	Attribute *IconImageSequence;
public:
	            Macro_RTDoseDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTDoseDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RTStructureSetDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *InstanceNumber;
	Attribute *StructureSetLabel;
	Attribute *StructureSetDate;
	Attribute *StructureSetTime;
public:
	            Macro_RTStructureSetDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTStructureSetDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RTPlanDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *InstanceNumber;
	Attribute *RTPlanLabel;
	Attribute *RTPlanDate;
	Attribute *RTPlanTime;
public:
	            Macro_RTPlanDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTPlanDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RTTreatmentRecordDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *InstanceNumber;
	Attribute *TreatmentDate;
	Attribute *TreatmentTime;
public:
	            Macro_RTTreatmentRecordDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTTreatmentRecordDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PresentationDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *PresentationCreationDate;
	Attribute *PresentationCreationTime;
	Attribute *ReferencedSeriesSequence;
	Attribute *BlendingSequence;
public:
	            Macro_PresentationDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PresentationDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_WaveformDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *InstanceNumber;
	Attribute *ContentDate;
	Attribute *ContentTime;
public:
	            Macro_WaveformDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "WaveformDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_SRDocumentDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *InstanceNumber;
	Attribute *CompletionFlag;
	Attribute *VerificationFlag;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *VerificationDateTime;
	Attribute *ConceptNameCodeSequence;
	Attribute *ContentSequence;
public:
	            Macro_SRDocumentDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SRDocumentDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_KeyObjectDocumentDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *InstanceNumber;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *ConceptNameCodeSequence;
	Attribute *ContentSequence;
public:
	            Macro_KeyObjectDocumentDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "KeyObjectDocumentDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_SpectroscopyDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *ImageType;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *InstanceNumber;
	Attribute *ReferencedImageEvidenceSequence;
	Attribute *NumberOfFrames;
	Attribute *Rows;
	Attribute *Columns;
	Attribute *DataPointRows;
	Attribute *DataPointColumns;
	Attribute *IconImageSequence;
public:
	            Macro_SpectroscopyDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SpectroscopyDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RawDataDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *InstanceNumber;
	Attribute *IconImageSequence;
public:
	            Macro_RawDataDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RawDataDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RegistrationDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *ContentDate;
	Attribute *ContentTime;
public:
	            Macro_RegistrationDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RegistrationDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_FiducialDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *ContentDate;
	Attribute *ContentTime;
public:
	            Macro_FiducialDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "FiducialDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_HangingProtocolDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *HangingProtocolName;
	Attribute *HangingProtocolDescription;
	Attribute *HangingProtocolLevel;
	Attribute *HangingProtocolCreator;
	Attribute *HangingProtocolCreationDateTime;
	Attribute *HangingProtocolDefinitionSequence;
	Attribute *NumberOfPriorsReferenced;
	Attribute *HangingProtocolUserIdentificationCodeSequence;
public:
	            Macro_HangingProtocolDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "HangingProtocolDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_EncapsulatedDocumentDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *InstanceNumber;
	Attribute *DocumentTitle;
	Attribute *HL7InstanceIdentifier;
	Attribute *ConceptNameCodeSequence;
	Attribute *MIMETypeOfEncapsulatedDocument;
public:
	            Macro_EncapsulatedDocumentDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EncapsulatedDocumentDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_HL7StructuredDocumentDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *HL7InstanceIdentifier;
	Attribute *HL7DocumentEffectiveTime;
	Attribute *HL7DocumentTypeCodeSequence;
public:
	            Macro_HL7StructuredDocumentDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "HL7StructuredDocumentDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_RealWorldValueMappingDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
	Attribute *ContentDate;
	Attribute *ContentTime;
public:
	            Macro_RealWorldValueMappingDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RealWorldValueMappingDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_StereometricRelationshipDirectoryRecord : public Module {
	const char *module;
	Attribute *SpecificCharacterSet;
public:
	            Macro_StereometricRelationshipDirectoryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "StereometricRelationshipDirectoryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DirectoryInformationDental : public Module {
	const char *module;
	Attribute *DirectoryRecordSequence;
public:
	            Module_DirectoryInformationDental(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DirectoryInformationDental"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PETSeries : public Module {
	const char *module;
	Attribute *SeriesDate;
	Attribute *SeriesTime;
	Attribute *Units;
	Attribute *CountsSource;
	Attribute *SeriesType;
	Attribute *ReprojectionMethod;
	Attribute *NumberOfRRIntervals;
	Attribute *NumberOfTimeSlots;
	Attribute *NumberOfTimeSlices;
	Attribute *NumberOfSlices;
	Attribute *CorrectedImage;
	Attribute *RandomsCorrectionMethod;
	Attribute *AttenuationCorrectionMethod;
	Attribute *ScatterCorrectionMethod;
	Attribute *DecayCorrection;
	Attribute *ReconstructionDiameter;
	Attribute *ConvolutionKernel;
	Attribute *ReconstructionMethod;
	Attribute *DetectorLinesOfResponseUsed;
	Attribute *AcquisitionStartCondition;
	Attribute *AcquisitionStartConditionData;
	Attribute *AcquisitionTerminationCondition;
	Attribute *AcquisitionTerminationConditionData;
	Attribute *FieldOfViewShape;
	Attribute *FieldOfViewDimensions;
	Attribute *GantryDetectorTilt;
	Attribute *GantryDetectorSlew;
	Attribute *TypeOfDetectorMotion;
	Attribute *CollimatorType;
	Attribute *CollimatorGridName;
	Attribute *AxialAcceptance;
	Attribute *AxialMash;
	Attribute *TransverseMash;
	Attribute *DetectorElementSize;
	Attribute *CoincidenceWindowWidth;
	Attribute *EnergyWindowRangeSequence;
	Attribute *SecondaryCountsType;
public:
	            Module_PETSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PETIsotope : public Module {
	const char *module;
	Attribute *RadiopharmaceuticalInformationSequence;
	Attribute *InterventionDrugInformationSequence;
public:
	            Module_PETIsotope(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETIsotope"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PETMultigatedAcquisition : public Module {
	const char *module;
	Attribute *BeatRejectionFlag;
	Attribute *TriggerSourceOrType;
	Attribute *PVCRejection;
	Attribute *SkipBeats;
	Attribute *HeartRate;
	Attribute *CardiacFramingType;
public:
	            Module_PETMultigatedAcquisition(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETMultigatedAcquisition"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PETImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *RescaleIntercept;
	Attribute *RescaleSlope;
	Attribute *FrameReferenceTime;
	Attribute *TriggerTime;
	Attribute *FrameTime;
	Attribute *LowRRValue;
	Attribute *HighRRValue;
	Attribute *LossyImageCompression;
	Attribute *ImageIndex;
	Attribute *AcquisitionDate;
	Attribute *AcquisitionTime;
	Attribute *ActualFrameDuration;
	Attribute *NominalInterval;
	Attribute *IntervalsAcquired;
	Attribute *IntervalsRejected;
	Attribute *PrimaryPromptsCountsAccumulated;
	Attribute *SecondaryCountsAccumulated;
	Attribute *SliceSensitivityFactor;
	Attribute *DecayFactor;
	Attribute *DoseCalibrationFactor;
	Attribute *ScatterFractionFactor;
	Attribute *DeadTimeFactor;
	Attribute *SliceProgressionDirection;
	Attribute *ViewCodeSequence;
public:
	            Module_PETImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsForEnhancedPETImage : public Module {
	const char *module;
	Attribute *SharedFunctionalGroupsSequence;
	Attribute *PerFrameFunctionalGroupsSequence;
public:
	            Module_MultiFrameFunctionalGroupsForEnhancedPETImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsForEnhancedPETImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PETFrameTypeMacro : public Module {
	const char *module;
	Attribute *PETFrameTypeSequence;
public:
	            Macro_PETFrameTypeMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETFrameTypeMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PETFrameAcquisitionMacro : public Module {
	const char *module;
	Attribute *PETFrameAcquisitionSequence;
public:
	            Macro_PETFrameAcquisitionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETFrameAcquisitionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PETDetectorMotionDetailsMacro : public Module {
	const char *module;
	Attribute *PETDetectorMotionDetailsSequence;
public:
	            Macro_PETDetectorMotionDetailsMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETDetectorMotionDetailsMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PETPositionMacro : public Module {
	const char *module;
	Attribute *PETPositionSequence;
public:
	            Macro_PETPositionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETPositionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PETFrameCorrectionFactorsMacro : public Module {
	const char *module;
	Attribute *PETFrameCorrectionFactorsSequence;
public:
	            Macro_PETFrameCorrectionFactorsMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETFrameCorrectionFactorsMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PETReconstructionMacro : public Module {
	const char *module;
	Attribute *PETReconstructionSequence;
public:
	            Macro_PETReconstructionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETReconstructionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PETTableDynamicsMacro : public Module {
	const char *module;
	Attribute *PETTableDynamicsSequence;
public:
	            Macro_PETTableDynamicsMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PETTableDynamicsMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EnhancedPETSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *ReferencedPerformedProcedureStepSequence;
	Attribute *RelatedSeriesSequence;
public:
	            Module_EnhancedPETSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EnhancedPETSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EnhancedPETIsotope : public Module {
	const char *module;
	Attribute *RadiopharmaceuticalInformationSequence;
public:
	            Module_EnhancedPETIsotope(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EnhancedPETIsotope"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EnhancedPETAcquisition : public Module {
	const char *module;
	Attribute *AcquisitionStartCondition;
	Attribute *StartDensityThreshold;
	Attribute *StartRelativeDensityDifferenceThreshold;
	Attribute *StartCardiacTriggerCountThreshold;
	Attribute *StartRespiratoryTriggerCountThreshold;
	Attribute *AcquisitionTerminationCondition;
	Attribute *TerminationCountsThreshold;
	Attribute *TerminationDensityThreshold;
	Attribute *TerminationRelativeDensityThreshold;
	Attribute *TerminationTimeThreshold;
	Attribute *TerminationCardiacTriggerCountThreshold;
	Attribute *TerminationRespiratoryTriggerCountThreshold;
	Attribute *TypeOfDetectorMotion;
	Attribute *DetectorGeometry;
	Attribute *TransverseDetectorSeparation;
	Attribute *AxialDetectorDimension;
	Attribute *CollimatorType;
	Attribute *CoincidenceWindowWidth;
	Attribute *EnergyWindowRangeSequence;
	Attribute *TableMotion;
	Attribute *TimeOfFlightInformationUsed;
	Attribute *ViewCodeSequence;
	Attribute *SliceProgressionDirection;
public:
	            Module_EnhancedPETAcquisition(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EnhancedPETAcquisition"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EnhancedPETImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *AcquisitionNumber;
	Attribute *AcquisitionDateTime;
	Attribute *AcquisitionDuration;
	Attribute *CountsSource;
	Attribute *DecayCorrected;
	Attribute *AttenuationCorrected;
	Attribute *ScatterCorrected;
	Attribute *DeadTimeCorrected;
	Attribute *GantryMotionCorrected;
	Attribute *PatientMotionCorrected;
	Attribute *CountLossNormalizationCorrected;
	Attribute *RandomsCorrected;
	Attribute *NonUniformRadialSamplingCorrected;
	Attribute *SensitivityCalibrated;
	Attribute *DetectorNormalizationCorrection;
	Attribute *RandomsCorrectionMethod;
	Attribute *AttenuationCorrectionSource;
	Attribute *AttenuationCorrectionTemporalRelationship;
	Attribute *ScatterCorrectionMethod;
	Attribute *DecayCorrectionDateTime;
	Attribute *ReferencedRawDataSequence;
	Attribute *ReferencedWaveformSequence;
	Attribute *ReferencedImageEvidenceSequence;
	Attribute *SourceImageEvidenceSequence;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *ContentQualification;
	Attribute *ImageComments;
	Attribute *BurnedInAnnotation;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *LossyImageCompressionMethod;
	Attribute *PresentationLUTShape;
	Attribute *IconImageSequence;
public:
	            Module_EnhancedPETImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EnhancedPETImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_BeamLimitingDevicePositionMacro : public Module {
	const char *module;
	Attribute *BeamLimitingDevicePositionSequence;
public:
	            Macro_BeamLimitingDevicePositionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "BeamLimitingDevicePositionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PatientSupportIdentificationMacro : public Module {
	const char *module;
	Attribute *PatientSupportType;
	Attribute *PatientSupportID;
	Attribute *PatientSupportAccessoryCode;
public:
	            Macro_PatientSupportIdentificationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PatientSupportIdentificationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *SeriesInstanceUID;
	Attribute *SeriesNumber;
	Attribute *SeriesDescription;
	Attribute *ReferencedPerformedProcedureStepSequence;
	Attribute *RequestAttributesSequence;
public:
	            Module_RTSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTImage : public Module {
	const char *module;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *PixelIntensityRelationship;
	Attribute *PixelIntensityRelationshipSign;
	Attribute *RTImageLabel;
	Attribute *RTImageName;
	Attribute *RTImageDescription;
	Attribute *OperatorName;
	Attribute *ImageType;
	Attribute *ConversionType;
	Attribute *ReportedValuesOrigin;
	Attribute *RTImagePlane;
	Attribute *XRayImageReceptorAngle;
	Attribute *RTImageOrientation;
	Attribute *ImagePlanePixelSpacing;
	Attribute *RTImagePosition;
	Attribute *RadiationMachineName;
	Attribute *PrimaryDosimeterUnit;
	Attribute *RadiationMachineSAD;
	Attribute *RadiationMachineSSD;
	Attribute *RTImageSID;
	Attribute *SourceToReferenceObjectDistance;
	Attribute *ReferencedRTPlanSequence;
	Attribute *ReferencedBeamNumber;
	Attribute *ReferencedFractionGroupNumber;
	Attribute *FractionNumber;
	Attribute *StartCumulativeMetersetWeight;
	Attribute *EndCumulativeMetersetWeight;
	Attribute *ExposureSequence;
	Attribute *FluenceMapSequence;
	Attribute *GantryAngle;
	Attribute *GantryPitchAngle;
	Attribute *BeamLimitingDeviceAngle;
	Attribute *PatientSupportAngle;
	Attribute *TableTopEccentricAxisDistance;
	Attribute *TableTopEccentricAngle;
	Attribute *TableTopPitchAngle;
	Attribute *TableTopRollAngle;
	Attribute *TableTopVerticalPosition;
	Attribute *TableTopLongitudinalPosition;
	Attribute *TableTopLateralPosition;
	Attribute *IsocenterPosition;
	Attribute *PatientPosition;
public:
	            Module_RTImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTDose : public Module {
	const char *module;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *DoseUnits;
	Attribute *DoseType;
	Attribute *InstanceNumber;
	Attribute *DoseComment;
	Attribute *NormalizationPoint;
	Attribute *DoseSummationType;
	Attribute *ReferencedRTPlanSequence;
	Attribute *GridFrameOffsetVector;
	Attribute *DoseGridScaling;
	Attribute *TissueHeterogeneityCorrection;
public:
	            Module_RTDose(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTDose"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTDVH : public Module {
	const char *module;
	Attribute *ReferencedStructureSetSequence;
	Attribute *DVHNormalizationPoint;
	Attribute *DVHNormalizationDoseValue;
	Attribute *DVHSequence;
public:
	            Module_RTDVH(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTDVH"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_StructureSet : public Module {
	const char *module;
	Attribute *StructureSetLabel;
	Attribute *StructureSetName;
	Attribute *StructureSetDescription;
	Attribute *InstanceNumber;
	Attribute *StructureSetDate;
	Attribute *StructureSetTime;
	Attribute *ReferencedFrameOfReferenceSequence;
	Attribute *StructureSetROISequence;
public:
	            Module_StructureSet(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "StructureSet"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ROIContour : public Module {
	const char *module;
	Attribute *ROIContourSequence;
public:
	            Module_ROIContour(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ROIContour"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTDoseROI : public Module {
	const char *module;
	Attribute *RTDoseROISequence;
public:
	            Module_RTDoseROI(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTDoseROI"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTROIObservations : public Module {
	const char *module;
	Attribute *RTROIObservationsSequence;
public:
	            Module_RTROIObservations(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTROIObservations"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTGeneralPlan : public Module {
	const char *module;
	Attribute *RTPlanLabel;
	Attribute *RTPlanName;
	Attribute *RTPlanDescription;
	Attribute *InstanceNumber;
	Attribute *OperatorName;
	Attribute *RTPlanDate;
	Attribute *RTPlanTime;
	Attribute *TreatmentProtocols;
	Attribute *PlanIntent;
	Attribute *TreatmentSites;
	Attribute *RTPlanGeometry;
	Attribute *ReferencedStructureSetSequence;
	Attribute *ReferencedDoseSequence;
	Attribute *ReferencedRTPlanSequence;
public:
	            Module_RTGeneralPlan(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTGeneralPlan"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTPrescription : public Module {
	const char *module;
	Attribute *PrescriptionDescription;
	Attribute *DoseReferenceSequence;
public:
	            Module_RTPrescription(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTPrescription"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTToleranceTables : public Module {
	const char *module;
	Attribute *ToleranceTableSequence;
public:
	            Module_RTToleranceTables(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTToleranceTables"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTPatientSetup : public Module {
	const char *module;
	Attribute *PatientSetupSequence;
public:
	            Module_RTPatientSetup(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTPatientSetup"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTFractionScheme : public Module {
	const char *module;
	Attribute *FractionGroupSequence;
public:
	            Module_RTFractionScheme(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTFractionScheme"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTBeams : public Module {
	const char *module;
	Attribute *BeamSequence;
public:
	            Module_RTBeams(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTBeams"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTBrachyApplicationSetups : public Module {
	const char *module;
	Attribute *BrachyTreatmentTechnique;
	Attribute *BrachyTreatmentType;
	Attribute *TreatmentMachineSequence;
	Attribute *SourceSequence;
	Attribute *ApplicationSetupSequence;
public:
	            Module_RTBrachyApplicationSetups(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTBrachyApplicationSetups"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_Approval : public Module {
	const char *module;
	Attribute *ApprovalStatus;
	Attribute *ReviewDate;
	Attribute *ReviewTime;
	Attribute *ReviewerName;
public:
	            Module_Approval(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "Approval"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTGeneralTreatmentRecord : public Module {
	const char *module;
	Attribute *InstanceNumber;
	Attribute *TreatmentDate;
	Attribute *TreatmentTime;
	Attribute *ReferencedRTPlanSequence;
	Attribute *ReferencedTreatmentRecordSequence;
public:
	            Module_RTGeneralTreatmentRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTGeneralTreatmentRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTTreatmentMachineRecord : public Module {
	const char *module;
	Attribute *TreatmentMachineSequence;
public:
	            Module_RTTreatmentMachineRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTTreatmentMachineRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MeasuredDoseReferenceRecord : public Module {
	const char *module;
	Attribute *MeasuredDoseReferenceSequence;
public:
	            Module_MeasuredDoseReferenceRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MeasuredDoseReferenceRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_CalculatedDoseReferenceRecord : public Module {
	const char *module;
	Attribute *CalculatedDoseReferenceSequence;
public:
	            Module_CalculatedDoseReferenceRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CalculatedDoseReferenceRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTBeamsSessionRecord : public Module {
	const char *module;
	Attribute *OperatorName;
	Attribute *ReferencedFractionGroupNumber;
	Attribute *NumberOfFractionsPlanned;
	Attribute *PrimaryDosimeterUnit;
	Attribute *TreatmentSessionBeamSequence;
public:
	            Module_RTBeamsSessionRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTBeamsSessionRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTBrachySessionRecord : public Module {
	const char *module;
	Attribute *OperatorName;
	Attribute *ReferencedFractionGroupNumber;
	Attribute *NumberOfFractionsPlanned;
	Attribute *BrachyTreatmentTechnique;
	Attribute *BrachyTreatmentType;
	Attribute *RecordedSourceSequence;
	Attribute *TreatmentSessionApplicationSetupSequence;
public:
	            Module_RTBrachySessionRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTBrachySessionRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTTreatmentSummaryRecord : public Module {
	const char *module;
	Attribute *CurrentTreatmentStatus;
	Attribute *TreatmentStatusComment;
	Attribute *FirstTreatmentDate;
	Attribute *MostRecentTreatmentDate;
	Attribute *FractionGroupSummarySequence;
	Attribute *TreatmentSummaryMeasuredDoseReferenceSequence;
	Attribute *TreatmentSummaryCalculatedDoseReferenceSequence;
public:
	            Module_RTTreatmentSummaryRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTTreatmentSummaryRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTIonToleranceTables : public Module {
	const char *module;
	Attribute *IonToleranceTableSequence;
public:
	            Module_RTIonToleranceTables(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTIonToleranceTables"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTIonBeams : public Module {
	const char *module;
	Attribute *IonBeamSequence;
public:
	            Module_RTIonBeams(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTIonBeams"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RTIonBeamsSessionRecord : public Module {
	const char *module;
	Attribute *OperatorName;
	Attribute *ReferencedFractionGroupNumber;
	Attribute *NumberOfFractionsPlanned;
	Attribute *PrimaryDosimeterUnit;
	Attribute *TreatmentSessionIonBeamSequence;
public:
	            Module_RTIonBeamsSessionRecord(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RTIonBeamsSessionRecord"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_AcquisitionContext : public Module {
	const char *module;
	Attribute *AcquisitionContextSequence;
	Attribute *AcquisitionContextDescription;
public:
	            Module_AcquisitionContext(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "AcquisitionContext"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SpecimenIdentification : public Module {
	const char *module;
	Attribute *SpecimenAccessionNumber;
	Attribute *SpecimenSequence;
public:
	            Module_SpecimenIdentification(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SpecimenIdentification"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayAcquisitionDose : public Module {
	const char *module;
	Attribute *KVP;
	Attribute *XRayTubeCurrent;
	Attribute *XRayTubeCurrentInuA;
	Attribute *ExposureTime;
	Attribute *ExposureTimeInuS;
	Attribute *Exposure;
	Attribute *ExposureInuAs;
	Attribute *DistanceSourceToDetector;
	Attribute *DistanceSourceToPatient;
	Attribute *ImageAndFluoroscopyAreaDoseProduct;
	Attribute *BodyPartThickness;
	Attribute *RelativeXRayExposure;
	Attribute *EntranceDose;
	Attribute *EntranceDoseInmGy;
	Attribute *ExposedArea;
	Attribute *DistanceSourceToEntrance;
	Attribute *CommentsOnRadiationDose;
	Attribute *XRayOutput;
	Attribute *HalfValueLayer;
	Attribute *OrganDose;
	Attribute *OrganExposed;
	Attribute *AnodeTargetMaterial;
	Attribute *FilterMaterial;
	Attribute *FilterThicknessMaximum;
	Attribute *FilterThicknessMinimum;
	Attribute *RectificationType;
public:
	            Module_XRayAcquisitionDose(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayAcquisitionDose"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayGeneration : public Module {
	const char *module;
	Attribute *KVP;
	Attribute *XRayTubeCurrent;
	Attribute *XRayTubeCurrentInuA;
	Attribute *ExposureTime;
	Attribute *ExposureTimeInuS;
	Attribute *Exposure;
	Attribute *ExposureInuAs;
	Attribute *ExposureControlMode;
	Attribute *ExposureControlModeDescription;
	Attribute *ExposureStatus;
	Attribute *PhototimerSetting;
	Attribute *FocalSpot;
	Attribute *AnodeTargetMaterial;
	Attribute *RectificationType;
	Attribute *GeneratorID;
public:
	            Module_XRayGeneration(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayGeneration"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayFiltration : public Module {
	const char *module;
	Attribute *FilterType;
	Attribute *FilterMaterial;
	Attribute *FilterThicknessMaximum;
	Attribute *FilterThicknessMinimum;
public:
	            Module_XRayFiltration(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayFiltration"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayGrid : public Module {
	const char *module;
	Attribute *Grid;
	Attribute *GridAbsorbingMaterial;
	Attribute *GridSpacingMaterial;
	Attribute *GridThickness;
	Attribute *GridPitch;
	Attribute *GridAspectRatio;
	Attribute *GridPeriod;
	Attribute *GridFocalDistance;
	Attribute *GridID;
public:
	            Module_XRayGrid(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayGrid"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DXSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *ReferencedPerformedProcedureStepSequence;
	Attribute *PresentationIntentType;
public:
	            Module_DXSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DXSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DXAnatomyImaged : public Module {
	const char *module;
	Attribute *ImageLaterality;
public:
	            Module_DXAnatomyImaged(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DXAnatomyImaged"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DXImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *PixelIntensityRelationship;
	Attribute *PixelIntensityRelationshipSign;
	Attribute *RescaleIntercept;
	Attribute *RescaleSlope;
	Attribute *RescaleType;
	Attribute *PresentationLUTShape;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *DerivationDescription;
	Attribute *AcquisitionDeviceProcessingDescription;
	Attribute *AcquisitionDeviceProcessingCode;
	Attribute *PatientOrientation;
	Attribute *CalibrationImage;
	Attribute *BurnedInAnnotation;
	Attribute *VOILUTSequence;
	Attribute *WindowCenter;
	Attribute *WindowWidth;
	Attribute *WindowCenterWidthExplanation;
public:
	            Module_DXImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DXImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_DigitalXRayDetectorMacro : public Module {
	const char *module;
	Attribute *DetectorType;
	Attribute *DetectorConfiguration;
	Attribute *DetectorDescription;
	Attribute *DetectorMode;
	Attribute *DetectorID;
	Attribute *DateOfLastDetectorCalibration;
	Attribute *TimeOfLastDetectorCalibration;
	Attribute *ExposuresOnDetectorSinceLastCalibration;
	Attribute *ExposuresOnDetectorSinceManufactured;
	Attribute *DetectorTimeSinceLastExposure;
	Attribute *DetectorBinning;
	Attribute *DetectorManufacturerName;
	Attribute *DetectorManufacturerModelName;
	Attribute *DetectorConditionsNominalFlag;
	Attribute *DetectorTemperature;
	Attribute *Sensitivity;
	Attribute *DetectorElementPhysicalSize;
	Attribute *DetectorElementSpacing;
	Attribute *DetectorActiveShape;
	Attribute *DetectorActiveDimensions;
	Attribute *DetectorActiveOrigin;
public:
	            Macro_DigitalXRayDetectorMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DigitalXRayDetectorMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DXDetector : public Module {
	const char *module;
	Attribute *DetectorActiveTime;
	Attribute *DetectorActivationOffsetFromExposure;
	Attribute *FieldOfViewShape;
	Attribute *FieldOfViewDimensions;
	Attribute *FieldOfViewOrigin;
	Attribute *FieldOfViewRotation;
	Attribute *FieldOfViewHorizontalFlip;
	Attribute *ImagerPixelSpacing;
	Attribute *CassetteID;
	Attribute *PlateID;
public:
	            Module_DXDetector(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DXDetector"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DXPositioning : public Module {
	const char *module;
	Attribute *ProjectionEponymousNameCodeSequence;
	Attribute *PatientPosition;
	Attribute *ViewPosition;
	Attribute *ViewCodeSequence;
	Attribute *ViewModifierCodeSequence;
	Attribute *PatientOrientationCodeSequence;
	Attribute *PatientOrientationModifierCodeSequence;
	Attribute *PatientGantryRelationshipCodeSequence;
	Attribute *DistanceSourceToPatient;
	Attribute *DistanceSourceToDetector;
	Attribute *EstimatedRadiographicMagnificationFactor;
	Attribute *PositionerType;
	Attribute *PositionerPrimaryAngle;
	Attribute *PositionerSecondaryAngle;
	Attribute *DetectorPrimaryAngle;
	Attribute *DetectorSecondaryAngle;
	Attribute *ColumnAngulation;
	Attribute *TableType;
	Attribute *TableAngle;
	Attribute *BodyPartThickness;
	Attribute *CompressionForce;
public:
	            Module_DXPositioning(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DXPositioning"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MammographySeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *RequestAttributesSequence;
public:
	            Module_MammographySeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MammographySeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MammographyImage : public Module {
	const char *module;
	Attribute *PositionerType;
	Attribute *DistanceSourceToPatient;
	Attribute *DistanceSourceToDetector;
	Attribute *PositionerPrimaryAngle;
	Attribute *PositionerSecondaryAngle;
	Attribute *ImageLaterality;
	Attribute *OrganExposed;
	Attribute *ImplantPresent;
	Attribute *PartialView;
	Attribute *PartialViewDescription;
	Attribute *PartialViewCodeSequence;
	Attribute *ViewCodeSequence;
public:
	            Module_MammographyImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MammographyImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_IntraoralSeries : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_IntraoralSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "IntraoralSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_IntraoralImage : public Module {
	const char *module;
	Attribute *PositionerType;
	Attribute *ImageLaterality;
	Attribute *AnatomicRegionSequence;
	Attribute *PrimaryAnatomicStructureSequence;
public:
	            Module_IntraoralImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "IntraoralImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ImageHistogram : public Module {
	const char *module;
	Attribute *HistogramSequence;
public:
	            Module_ImageHistogram(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ImageHistogram"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_IHEMammoProfile : public Module {
	const char *module;
	Attribute *PatientName;
	Attribute *PatientID;
	Attribute *PatientBirthDate;
	Attribute *PatientAge;
	Attribute *AcquisitionDate;
	Attribute *AcquisitionTime;
	Attribute *OperatorName;
	Attribute *Manufacturer;
	Attribute *InstitutionName;
	Attribute *InstitutionAddress;
	Attribute *ManufacturerModelName;
	Attribute *DeviceSerialNumber;
	Attribute *DetectorID;
	Attribute *SoftwareVersion;
	Attribute *StationName;
	Attribute *GantryID;
	Attribute *KVP;
	Attribute *Exposure;
	Attribute *ExposureTime;
	Attribute *FilterMaterial;
	Attribute *AnodeTargetMaterial;
	Attribute *CompressionForce;
	Attribute *BodyPartThickness;
	Attribute *PositionerPrimaryAngle;
	Attribute *RelativeXRayExposure;
	Attribute *EntranceDoseInmGy;
	Attribute *OrganDose;
	Attribute *BurnedInAnnotation;
	Attribute *ImplantPresent;
	Attribute *PixelPaddingValue;
	Attribute *EstimatedRadiographicMagnificationFactor;
	Attribute *DateOfLastDetectorCalibration;
public:
	            Module_IHEMammoProfile(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "IHEMammoProfile"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_IHEMammoProfileWithoutPartialViewOption : public Module {
	const char *module;
public:
	            Module_IHEMammoProfileWithoutPartialViewOption(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "IHEMammoProfileWithoutPartialViewOption"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_IHEMammoProfileWithPartialViewOption : public Module {
	const char *module;
	Attribute *PartialView;
	Attribute *PartialViewCodeSequence;
public:
	            Module_IHEMammoProfileWithPartialViewOption(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "IHEMammoProfileWithPartialViewOption"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_IHEMammoProfileForPresentationOnly : public Module {
	const char *module;
	Attribute *SourceImageSequence;
	Attribute *VOILUTSequence;
	Attribute *WindowCenterWidthExplanation;
	Attribute *VOILUTFunction;
public:
	            Module_IHEMammoProfileForPresentationOnly(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "IHEMammoProfileForPresentationOnly"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DentalImageOnMediaProfile : public Module {
	const char *module;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *InstitutionName;
	Attribute *ManufacturerModelName;
	Attribute *DetectorID;
	Attribute *DetectorManufacturerName;
	Attribute *DetectorManufacturerModelName;
public:
	            Module_DentalImageOnMediaProfile(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DentalImageOnMediaProfile"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_VLImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *SamplesPerPixel;
	Attribute *PlanarConfiguration;
	Attribute *ContentTime;
	Attribute *LossyImageCompression;
	Attribute *ReferencedImageSequence;
	Attribute *WindowCenter;
	Attribute *WindowWidth;
	Attribute *AnatomicRegionSequence;
public:
	            Module_VLImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "VLImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_VLEndoscopicSeriesPseudo : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_VLEndoscopicSeriesPseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "VLEndoscopicSeriesPseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_VLMicroscopicSeriesPseudo : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_VLMicroscopicSeriesPseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "VLMicroscopicSeriesPseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_VLSlideCoordinatesMicroscopicSeriesPseudo : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_VLSlideCoordinatesMicroscopicSeriesPseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "VLSlideCoordinatesMicroscopicSeriesPseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_VLPhotographicSeriesPseudo : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_VLPhotographicSeriesPseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "VLPhotographicSeriesPseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SlideCoordinates : public Module {
	const char *module;
	Attribute *ImageCenterPointCoordinatesSequence;
	Attribute *PixelSpacingSequence;
public:
	            Module_SlideCoordinates(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SlideCoordinates"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OphthalmicPhotographySeries : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_OphthalmicPhotographySeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicPhotographySeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OphthalmicPhotography8BitImagePseudo : public Module {
	const char *module;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
public:
	            Module_OphthalmicPhotography8BitImagePseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicPhotography8BitImagePseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OphthalmicPhotography16BitImagePseudo : public Module {
	const char *module;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
public:
	            Module_OphthalmicPhotography16BitImagePseudo(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicPhotography16BitImagePseudo"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OphthalmicPhotographyImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *InstanceNumber;
	Attribute *SamplesPerPixel;
	Attribute *SamplesPerPixelUsed;
	Attribute *PhotometricInterpretation;
	Attribute *PixelRepresentation;
	Attribute *PlanarConfiguration;
	Attribute *PixelSpacing;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *AcquisitionDateTime;
	Attribute *SourceImageSequence;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *LossyImageCompressionMethod;
	Attribute *PresentationLUTShape;
	Attribute *CalibrationImage;
	Attribute *BurnedInAnnotation;
public:
	            Module_OphthalmicPhotographyImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicPhotographyImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OphthalmicPhotographicParameters : public Module {
	const char *module;
	Attribute *AcquisitionDeviceTypeCodeSequence;
	Attribute *IlluminationTypeCodeSequence;
	Attribute *LightPathFilterTypeStackCodeSequence;
	Attribute *LightPathFilterPassThroughWavelength;
	Attribute *LightPathFilterPassBand;
	Attribute *ImagePathFilterTypeStackCodeSequence;
	Attribute *ImagePathFilterPassThroughWavelength;
	Attribute *ImagePathFilterPassBand;
	Attribute *LensesCodeSequence;
	Attribute *DetectorType;
	Attribute *ChannelDescriptionCodeSequence;
public:
	            Module_OphthalmicPhotographicParameters(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicPhotographicParameters"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_OphthalmicAcquisitionParametersMacro : public Module {
	const char *module;
	Attribute *RefractiveStateSequence;
	Attribute *EmmetropicMagnification;
	Attribute *IntraOcularPressure;
	Attribute *HorizontalFieldOfView;
	Attribute *PupilDilated;
	Attribute *MydriaticAgentCodeSequence;
	Attribute *DegreeOfDilation;
public:
	            Macro_OphthalmicAcquisitionParametersMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicAcquisitionParametersMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OphthalmicPhotographyAcquisitionParameters : public Module {
	const char *module;
	Attribute *PatientEyeMovementCommanded;
	Attribute *PatientEyeMovementCommandedCodeSequence;
public:
	            Module_OphthalmicPhotographyAcquisitionParameters(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicPhotographyAcquisitionParameters"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OcularRegionImaged : public Module {
	const char *module;
	Attribute *ImageLaterality;
	Attribute *RelativeImagePositionCodeSequence;
public:
	            Module_OcularRegionImaged(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OcularRegionImaged"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_StereometricSeries : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_StereometricSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "StereometricSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_StereometricRelationship : public Module {
	const char *module;
	Attribute *StereoPairsSequence;
public:
	            Module_StereometricRelationship(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "StereometricRelationship"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OphthalmicTomographySeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *SeriesNumber;
	Attribute *ReferencedPerformedProcedureStepSequence;
public:
	            Module_OphthalmicTomographySeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicTomographySeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OphthalmicTomographyImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *SamplesPerPixel;
	Attribute *AcquisitionDateTime;
	Attribute *AcquisitionDuration;
	Attribute *AcquisitionNumber;
	Attribute *PhotometricInterpretation;
	Attribute *PixelRepresentation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PresentationLUTShape;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *LossyImageCompressionMethod;
	Attribute *BurnedInAnnotation;
	Attribute *ConcatenationFrameOffsetNumber;
	Attribute *InConcatenationNumber;
	Attribute *InConcatenationTotalNumber;
public:
	            Module_OphthalmicTomographyImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicTomographyImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OphthalmicTomographyAcquisitionParameters : public Module {
	const char *module;
	Attribute *AxialLengthOfEye;
	Attribute *HorizontalFieldOfView;
public:
	            Module_OphthalmicTomographyAcquisitionParameters(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicTomographyAcquisitionParameters"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OphthalmicTomographyParameters : public Module {
	const char *module;
	Attribute *AcquisitionDeviceTypeCodeSequence;
	Attribute *LightPathFilterTypeStackCodeSequence;
	Attribute *LightPathFilterPassThroughWavelength;
	Attribute *LightPathFilterPassBand;
	Attribute *DetectorType;
	Attribute *IlluminationWaveLength;
	Attribute *IlluminationPower;
	Attribute *IlluminationBandwidth;
	Attribute *DepthSpatialResolution;
	Attribute *MaximumDepthDistortion;
	Attribute *AlongScanSpatialResolution;
	Attribute *MaximumAlongScanDistortion;
	Attribute *AcrossScanSpatialResolution;
	Attribute *MaximumAcrossScanDistortion;
public:
	            Module_OphthalmicTomographyParameters(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicTomographyParameters"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_OphthalmicFrameLocationMacro : public Module {
	const char *module;
	Attribute *OphthalmicFrameLocationSequence;
public:
	            Macro_OphthalmicFrameLocationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OphthalmicFrameLocationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsForOphthalmicTomography : public Module {
	const char *module;
	Attribute *SharedFunctionalGroupsSequence;
	Attribute *PerFrameFunctionalGroupsSequence;
public:
	            Module_MultiFrameFunctionalGroupsForOphthalmicTomography(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsForOphthalmicTomography"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_Synchronization : public Module {
	const char *module;
	Attribute *SynchronizationFrameOfReferenceUID;
	Attribute *SynchronizationTrigger;
	Attribute *TriggerSourceOrType;
	Attribute *SynchronizationChannel;
	Attribute *AcquisitionTimeSynchronized;
	Attribute *TimeSource;
	Attribute *TimeDistributionProtocol;
	Attribute *NTPSourceAddress;
public:
	            Module_Synchronization(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "Synchronization"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_WaveformIdentification : public Module {
	const char *module;
	Attribute *InstanceNumber;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *AcquisitionDateTime;
	Attribute *ReferencedInstanceSequence;
public:
	            Module_WaveformIdentification(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "WaveformIdentification"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_Waveform : public Module {
	const char *module;
	Attribute *WaveformSequence;
public:
	            Module_Waveform(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "Waveform"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_WaveformAnnotation : public Module {
	const char *module;
	Attribute *WaveformAnnotationSequence;
public:
	            Module_WaveformAnnotation(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "WaveformAnnotation"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_HierarchicalSOPInstanceReferenceMacro : public Module {
	const char *module;
	Attribute *StudyInstanceUID;
	Attribute *ReferencedSeriesSequence;
public:
	            Macro_HierarchicalSOPInstanceReferenceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "HierarchicalSOPInstanceReferenceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_HierarchicalSeriesReferenceMacro : public Module {
	const char *module;
	Attribute *SeriesInstanceUID;
	Attribute *RetrieveAETitle;
	Attribute *StorageMediaFileSetID;
	Attribute *StorageMediaFileSetUID;
	Attribute *ReferencedSOPSequence;
public:
	            Macro_HierarchicalSeriesReferenceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "HierarchicalSeriesReferenceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_IdentifiedPersonOrDeviceMacro : public Module {
	const char *module;
	Attribute *ObserverType;
	Attribute *PersonName;
	Attribute *PersonIdentificationCodeSequence;
	Attribute *StationName;
	Attribute *DeviceUID;
	Attribute *Manufacturer;
	Attribute *ManufacturerModelName;
	Attribute *InstitutionName;
	Attribute *InstitutionCodeSequence;
public:
	            Macro_IdentifiedPersonOrDeviceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "IdentifiedPersonOrDeviceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_NumericMeasurementMacro : public Module {
	const char *module;
	Attribute *MeasuredValueSequence;
	Attribute *NumericValueQualifierCodeSequence;
public:
	            Macro_NumericMeasurementMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "NumericMeasurementMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CodeMacro : public Module {
	const char *module;
	Attribute *ConceptCodeSequence;
public:
	            Macro_CodeMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CodeMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CompositeObjectReferenceMacro : public Module {
	const char *module;
	Attribute *ReferencedSOPSequence;
public:
	            Macro_CompositeObjectReferenceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CompositeObjectReferenceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ImageReferenceMacro : public Module {
	const char *module;
	Attribute *ReferencedSOPSequence;
public:
	            Macro_ImageReferenceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ImageReferenceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_WaveformReferenceMacro : public Module {
	const char *module;
	Attribute *ReferencedSOPSequence;
public:
	            Macro_WaveformReferenceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "WaveformReferenceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_SpatialCoordinatesMacro : public Module {
	const char *module;
	Attribute *GraphicData;
	Attribute *GraphicType;
	Attribute *FiducialUID;
public:
	            Macro_SpatialCoordinatesMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SpatialCoordinatesMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_TemporalCoordinatesMacro : public Module {
	const char *module;
	Attribute *TemporalRangeType;
	Attribute *ReferencedSamplePositions;
	Attribute *ReferencedTimeOffsets;
	Attribute *ReferencedDateTime;
public:
	            Macro_TemporalCoordinatesMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "TemporalCoordinatesMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_ContainerMacro : public Module {
	const char *module;
	Attribute *ContinuityOfContent;
	Attribute *ContentTemplateSequence;
public:
	            Macro_ContainerMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ContainerMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_DocumentContentMacro : public Module {
	const char *module;
	Attribute *ValueType;
	Attribute *ConceptNameCodeSequence;
	Attribute *TextValue;
	Attribute *DateTime;
	Attribute *Date;
	Attribute *Time;
	Attribute *PersonName;
	Attribute *UID;
public:
	            Macro_DocumentContentMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DocumentContentMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_DocumentRelationshipMacro : public Module {
	const char *module;
	Attribute *ObservationDateTime;
	Attribute *ContentSequence;
public:
	            Macro_DocumentRelationshipMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DocumentRelationshipMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SRDocumentSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *SeriesInstanceUID;
	Attribute *SeriesNumber;
	Attribute *SeriesDate;
	Attribute *SeriesTime;
	Attribute *SeriesDescription;
	Attribute *ReferencedPerformedProcedureStepSequence;
public:
	            Module_SRDocumentSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SRDocumentSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SRDocumentGeneral : public Module {
	const char *module;
	Attribute *InstanceNumber;
	Attribute *CompletionFlag;
	Attribute *CompletionFlagDescription;
	Attribute *VerificationFlag;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *VerifyingObserverSequence;
	Attribute *AuthorObserverSequence;
	Attribute *ParticipantSequence;
	Attribute *CustodialOrganizationSequence;
	Attribute *PredecessorDocumentsSequence;
	Attribute *IdenticalDocumentsSequence;
	Attribute *ReferencedRequestSequence;
	Attribute *PerformedProcedureCodeSequence;
	Attribute *CurrentRequestedProcedureEvidenceSequence;
	Attribute *PertinentOtherEvidenceSequence;
	Attribute *ReferencedInstanceSequence;
public:
	            Module_SRDocumentGeneral(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SRDocumentGeneral"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SRDocumentContent : public Module {
	const char *module;
public:
	            Module_SRDocumentContent(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SRDocumentContent"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_KeyObjectDocumentSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *SeriesInstanceUID;
	Attribute *SeriesNumber;
	Attribute *SeriesDate;
	Attribute *SeriesTime;
	Attribute *SeriesDescription;
	Attribute *ReferencedPerformedProcedureStepSequence;
public:
	            Module_KeyObjectDocumentSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "KeyObjectDocumentSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_KeyObjectDocument : public Module {
	const char *module;
	Attribute *InstanceNumber;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *ReferencedRequestSequence;
	Attribute *CurrentRequestedProcedureEvidenceSequence;
	Attribute *IdenticalDocumentsSequence;
public:
	            Module_KeyObjectDocument(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "KeyObjectDocument"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_BitmapDisplayShutter : public Module {
	const char *module;
	Attribute *ShutterShape;
	Attribute *ShutterOverlayGroup;
	Attribute *ShutterPresentationValue;
	Attribute *ShutterPresentationColorCIELabValue;
public:
	            Module_BitmapDisplayShutter(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "BitmapDisplayShutter"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DisplayedArea : public Module {
	const char *module;
	Attribute *DisplayedAreaSelectionSequence;
public:
	            Module_DisplayedArea(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DisplayedArea"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_GraphicAnnotation : public Module {
	const char *module;
	Attribute *GraphicAnnotationSequence;
public:
	            Module_GraphicAnnotation(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "GraphicAnnotation"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SpatialTransformation : public Module {
	const char *module;
	Attribute *ImageRotation;
	Attribute *ImageHorizontalFlip;
public:
	            Module_SpatialTransformation(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SpatialTransformation"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_GraphicLayer : public Module {
	const char *module;
	Attribute *GraphicLayerSequence;
public:
	            Module_GraphicLayer(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "GraphicLayer"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SoftcopyPresentationLUT : public Module {
	const char *module;
	Attribute *PresentationLUTSequence;
	Attribute *PresentationLUTShape;
public:
	            Module_SoftcopyPresentationLUT(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SoftcopyPresentationLUT"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_OverlayActivation : public Module {
	const char *module;
	Attribute *OverlayActivationLayer;
public:
	            Module_OverlayActivation(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "OverlayActivation"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_SoftcopyVOILUT : public Module {
	const char *module;
	Attribute *SoftcopyVOILUTSequence;
public:
	            Module_SoftcopyVOILUT(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "SoftcopyVOILUT"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PresentationSeries : public Module {
	const char *module;
	Attribute *Modality;
public:
	            Module_PresentationSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PresentationSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PresentationStateIdentification : public Module {
	const char *module;
	Attribute *PresentationCreationDate;
	Attribute *PresentationCreationTime;
public:
	            Module_PresentationStateIdentification(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PresentationStateIdentification"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_PresentationStateRelationshipMacro : public Module {
	const char *module;
	Attribute *ReferencedSeriesSequence;
public:
	            Macro_PresentationStateRelationshipMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PresentationStateRelationshipMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PresentationStateRelationship : public Module {
	const char *module;
public:
	            Module_PresentationStateRelationship(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PresentationStateRelationship"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PresentationStateShutter : public Module {
	const char *module;
	Attribute *ShutterPresentationValue;
	Attribute *ShutterPresentationColorCIELabValue;
public:
	            Module_PresentationStateShutter(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PresentationStateShutter"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PresentationStateMask : public Module {
	const char *module;
	Attribute *MaskSubtractionSequence;
	Attribute *RecommendedViewingMode;
public:
	            Module_PresentationStateMask(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PresentationStateMask"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_PresentationStateBlending : public Module {
	const char *module;
	Attribute *BlendingSequence;
	Attribute *RelativeOpacity;
	Attribute *ReferencedSpatialRegistrationSequence;
public:
	            Module_PresentationStateBlending(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "PresentationStateBlending"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_ICCProfile : public Module {
	const char *module;
	Attribute *ICCProfile;
public:
	            Module_ICCProfile(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "ICCProfile"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_HangingProtocolSelectorAttributeContextMacro : public Module {
	const char *module;
	Attribute *SelectorSequencePointer;
	Attribute *FunctionalGroupPointer;
	Attribute *SelectorSequencePointerPrivateCreator;
	Attribute *FunctionalGroupPrivateCreator;
	Attribute *SelectorAttributePrivateCreator;
public:
	            Macro_HangingProtocolSelectorAttributeContextMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "HangingProtocolSelectorAttributeContextMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_HangingProtocolSelectorAttributeValueMacro : public Module {
	const char *module;
	Attribute *SelectorATValue;
	Attribute *SelectorCSValue;
	Attribute *SelectorISValue;
	Attribute *SelectorLOValue;
	Attribute *SelectorLTValue;
	Attribute *SelectorPNValue;
	Attribute *SelectorSHValue;
	Attribute *SelectorSTValue;
	Attribute *SelectorUTValue;
	Attribute *SelectorDSValue;
	Attribute *SelectorFDValue;
	Attribute *SelectorFLValue;
	Attribute *SelectorULValue;
	Attribute *SelectorUSValue;
	Attribute *SelectorSLValue;
	Attribute *SelectorSSValue;
	Attribute *SelectorCodeSequenceValue;
public:
	            Macro_HangingProtocolSelectorAttributeValueMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "HangingProtocolSelectorAttributeValueMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_HangingProtocolDefinition : public Module {
	const char *module;
	Attribute *HangingProtocolName;
	Attribute *HangingProtocolDescription;
	Attribute *HangingProtocolLevel;
	Attribute *HangingProtocolCreator;
	Attribute *HangingProtocolCreationDateTime;
	Attribute *HangingProtocolDefinitionSequence;
	Attribute *NumberOfPriorsReferenced;
	Attribute *ImageSetsSequence;
	Attribute *HangingProtocolUserIdentificationCodeSequence;
	Attribute *HangingProtocolUserGroupName;
	Attribute *SourceHangingProtocolSequence;
public:
	            Module_HangingProtocolDefinition(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "HangingProtocolDefinition"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_HangingProtocolEnvironment : public Module {
	const char *module;
	Attribute *NumberOfScreens;
	Attribute *NominalScreenDefinitionSequence;
public:
	            Module_HangingProtocolEnvironment(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "HangingProtocolEnvironment"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_HangingProtocolDisplay : public Module {
	const char *module;
	Attribute *DisplaySetsSequence;
	Attribute *PartialDataDisplayHandling;
	Attribute *SynchronizedScrollingSequence;
	Attribute *NavigationIndicatorSequence;
public:
	            Module_HangingProtocolDisplay(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "HangingProtocolDisplay"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CommonCTMRImageDescriptionImageLevelMacro : public Module {
	const char *module;
	Attribute *PixelPresentation;
	Attribute *VolumetricProperties;
	Attribute *VolumeBasedCalculationTechnique;
public:
	            Macro_CommonCTMRImageDescriptionImageLevelMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CommonCTMRImageDescriptionImageLevelMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CommonCTMRImageDescriptionFrameLevelMacro : public Module {
	const char *module;
	Attribute *PixelPresentation;
	Attribute *VolumetricProperties;
	Attribute *VolumeBasedCalculationTechnique;
public:
	            Macro_CommonCTMRImageDescriptionFrameLevelMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CommonCTMRImageDescriptionFrameLevelMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRImageDescriptionImageLevelMacro : public Module {
	const char *module;
	Attribute *ComplexImageComponent;
	Attribute *AcquisitionContrast;
public:
	            Macro_MRImageDescriptionImageLevelMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRImageDescriptionImageLevelMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRImageDescriptionFrameLevelMacro : public Module {
	const char *module;
	Attribute *ComplexImageComponent;
	Attribute *AcquisitionContrast;
public:
	            Macro_MRImageDescriptionFrameLevelMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRImageDescriptionFrameLevelMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRSpectroscopyDescriptionImageLevelMacro : public Module {
	const char *module;
	Attribute *VolumetricProperties;
	Attribute *VolumeBasedCalculationTechnique;
	Attribute *ComplexImageComponent;
	Attribute *AcquisitionContrast;
public:
	            Macro_MRSpectroscopyDescriptionImageLevelMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRSpectroscopyDescriptionImageLevelMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRSpectroscopyDescriptionFrameLevelMacro : public Module {
	const char *module;
	Attribute *VolumetricProperties;
	Attribute *VolumeBasedCalculationTechnique;
	Attribute *ComplexImageComponent;
	Attribute *AcquisitionContrast;
public:
	            Macro_MRSpectroscopyDescriptionFrameLevelMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRSpectroscopyDescriptionFrameLevelMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRImageFrameTypeMacro : public Module {
	const char *module;
	Attribute *MRImageFrameTypeSequence;
public:
	            Macro_MRImageFrameTypeMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRImageFrameTypeMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRTimingAndRelatedParametersMacro : public Module {
	const char *module;
	Attribute *MRTimingAndRelatedParametersSequence;
public:
	            Macro_MRTimingAndRelatedParametersMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRTimingAndRelatedParametersMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRFOVGeometryMacro : public Module {
	const char *module;
	Attribute *MRFOVGeometrySequence;
public:
	            Macro_MRFOVGeometryMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRFOVGeometryMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MREchoMacro : public Module {
	const char *module;
	Attribute *MREchoSequence;
public:
	            Macro_MREchoMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MREchoMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRModifierMacro : public Module {
	const char *module;
	Attribute *MRModifierSequence;
public:
	            Macro_MRModifierMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRModifierMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRImagingModifierMacro : public Module {
	const char *module;
	Attribute *MRImagingModifierSequence;
public:
	            Macro_MRImagingModifierMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRImagingModifierMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRReceiveCoilMacro : public Module {
	const char *module;
	Attribute *MRReceiveCoilSequence;
public:
	            Macro_MRReceiveCoilMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRReceiveCoilMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRTransmitCoilMacro : public Module {
	const char *module;
	Attribute *MRTransmitCoilSequence;
public:
	            Macro_MRTransmitCoilMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRTransmitCoilMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRDiffusionMacro : public Module {
	const char *module;
	Attribute *MRDiffusionSequence;
public:
	            Macro_MRDiffusionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRDiffusionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRAveragesMacro : public Module {
	const char *module;
	Attribute *MRAveragesSequence;
public:
	            Macro_MRAveragesMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRAveragesMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRSpatialSaturationMacro : public Module {
	const char *module;
	Attribute *MRSpatialSaturationSequence;
public:
	            Macro_MRSpatialSaturationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRSpatialSaturationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRMetaboliteMapMacro : public Module {
	const char *module;
	Attribute *MRMetaboliteMapSequence;
public:
	            Macro_MRMetaboliteMapMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRMetaboliteMapMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRVelocityEncodingMacro : public Module {
	const char *module;
	Attribute *MRVelocityEncodingSequence;
public:
	            Macro_MRVelocityEncodingMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRVelocityEncodingMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRImageAndSpectroscopyInstanceMacro : public Module {
	const char *module;
	Attribute *AcquisitionNumber;
	Attribute *AcquisitionDateTime;
	Attribute *AcquisitionDuration;
	Attribute *ReferencedRawDataSequence;
	Attribute *ReferencedWaveformSequence;
	Attribute *ReferencedImageEvidenceSequence;
	Attribute *SourceImageEvidenceSequence;
	Attribute *ReferencedPresentationStateSequence;
	Attribute *ContentQualification;
	Attribute *ResonantNucleus;
	Attribute *KSpaceFiltering;
	Attribute *MagneticFieldStrength;
	Attribute *ApplicableSafetyStandardAgency;
	Attribute *ApplicableSafetyStandardDescription;
	Attribute *ImageComments;
public:
	            Macro_MRImageAndSpectroscopyInstanceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRImageAndSpectroscopyInstanceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsForEnhancedMRImage : public Module {
	const char *module;
	Attribute *SharedFunctionalGroupsSequence;
	Attribute *PerFrameFunctionalGroupsSequence;
public:
	            Module_MultiFrameFunctionalGroupsForEnhancedMRImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsForEnhancedMRImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRSpectroscopyFrameTypeMacro : public Module {
	const char *module;
	Attribute *MRSpectroscopyFrameTypeSequence;
public:
	            Macro_MRSpectroscopyFrameTypeMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRSpectroscopyFrameTypeMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_MRSpectroscopyFOVGeometryMacro : public Module {
	const char *module;
	Attribute *MRSpectroscopyFOVGeometrySequence;
public:
	            Macro_MRSpectroscopyFOVGeometryMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRSpectroscopyFOVGeometryMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsForMRSpectroscopy : public Module {
	const char *module;
	Attribute *SharedFunctionalGroupsSequence;
	Attribute *PerFrameFunctionalGroupsSequence;
public:
	            Module_MultiFrameFunctionalGroupsForMRSpectroscopy(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsForMRSpectroscopy"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EnhancedMRImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *SpacingBetweenSlices;
	Attribute *BurnedInAnnotation;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *LossyImageCompressionMethod;
	Attribute *PresentationLUTShape;
	Attribute *IconImageSequence;
public:
	            Module_EnhancedMRImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EnhancedMRImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MRPulseSequence : public Module {
	const char *module;
	Attribute *PulseSequenceName;
	Attribute *MRAcquisitionType;
	Attribute *EchoPulseSequence;
	Attribute *MultipleSpinEcho;
	Attribute *MultiplanarExcitation;
	Attribute *PhaseContrast;
	Attribute *TimeOfFlightContrast;
	Attribute *SteadyStatePulseSequence;
	Attribute *EchoPlanarPulseSequence;
	Attribute *SaturationRecovery;
	Attribute *SpectrallySelectedSuppression;
	Attribute *OversamplingPhase;
	Attribute *GeometryOfKSpaceTraversal;
	Attribute *RectilinearPhaseEncodeReordering;
	Attribute *SegmentedKSpaceTraversal;
	Attribute *CoverageOfKSpace;
	Attribute *NumberOfKSpaceTrajectories;
public:
	            Module_MRPulseSequence(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRPulseSequence"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MRSpectroscopy : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *TransmitterFrequency;
	Attribute *SpectralWidth;
	Attribute *ChemicalShiftReference;
	Attribute *VolumeLocalizationTechnique;
	Attribute *VolumeLocalizationSequence;
	Attribute *Decoupling;
	Attribute *DecoupledNucleus;
	Attribute *DecouplingFrequency;
	Attribute *DecouplingMethod;
	Attribute *DecouplingChemicalShiftReference;
	Attribute *TimeDomainFiltering;
	Attribute *NumberOfZeroFills;
	Attribute *BaselineCorrection;
	Attribute *FrequencyCorrection;
	Attribute *FirstOrderPhaseCorrection;
	Attribute *WaterReferencedPhaseCorrection;
public:
	            Module_MRSpectroscopy(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRSpectroscopy"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MRSpectroscopyPulseSequence : public Module {
	const char *module;
	Attribute *PulseSequenceName;
	Attribute *MRSpectroscopyAcquisitionType;
	Attribute *EchoPulseSequence;
	Attribute *MultipleSpinEcho;
	Attribute *MultiplanarExcitation;
	Attribute *SteadyStatePulseSequence;
	Attribute *EchoPlanarPulseSequence;
	Attribute *SpectrallySelectedSuppression;
	Attribute *GeometryOfKSpaceTraversal;
	Attribute *RectilinearPhaseEncodeReordering;
	Attribute *SegmentedKSpaceTraversal;
	Attribute *CoverageOfKSpace;
	Attribute *NumberOfKSpaceTrajectories;
public:
	            Module_MRSpectroscopyPulseSequence(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRSpectroscopyPulseSequence"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MRSpectroscopyData : public Module {
	const char *module;
	Attribute *Rows;
	Attribute *Columns;
	Attribute *DataPointRows;
	Attribute *DataPointColumns;
	Attribute *DataRepresentation;
	Attribute *SignalDomainColumns;
	Attribute *SignalDomainRows;
	Attribute *FirstOrderPhaseCorrectionAngle;
	Attribute *SpectroscopyData;
public:
	            Module_MRSpectroscopyData(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRSpectroscopyData"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_RawData : public Module {
	const char *module;
	Attribute *InstanceNumber;
	Attribute *ContentDate;
	Attribute *ContentTime;
	Attribute *AcquisitionDateTime;
	Attribute *CreatorVersionUID;
	Attribute *ReferencedInstanceSequence;
public:
	            Module_RawData(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "RawData"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MRSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *ReferencedPerformedProcedureStepSequence;
public:
	            Module_MRSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MRSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTFrameVOILUTMacro : public Module {
	const char *module;
	Attribute *FrameVOILUTSequence;
public:
	            Macro_CTFrameVOILUTMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTFrameVOILUTMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_CTSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *ReferencedPerformedProcedureStepSequence;
public:
	            Module_CTSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EnhancedCTImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *AcquisitionNumber;
	Attribute *AcquisitionDateTime;
	Attribute *AcquisitionDuration;
	Attribute *ReferencedRawDataSequence;
	Attribute *ReferencedWaveformSequence;
	Attribute *ReferencedImageEvidenceSequence;
	Attribute *SourceImageEvidenceSequence;
	Attribute *ReferencedPresentationStateSequence;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *ContentQualification;
	Attribute *ImageComments;
	Attribute *BurnedInAnnotation;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *LossyImageCompressionMethod;
	Attribute *PresentationLUTShape;
	Attribute *IconImageSequence;
public:
	            Module_EnhancedCTImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EnhancedCTImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTImageFrameTypeMacro : public Module {
	const char *module;
	Attribute *CTImageFrameTypeSequence;
public:
	            Macro_CTImageFrameTypeMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTImageFrameTypeMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTAcquisitionTypeMacro : public Module {
	const char *module;
	Attribute *CTAcquisitionTypeSequence;
public:
	            Macro_CTAcquisitionTypeMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTAcquisitionTypeMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTAcquisitionDetailsMacro : public Module {
	const char *module;
	Attribute *CTAcquisitionDetailsSequence;
public:
	            Macro_CTAcquisitionDetailsMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTAcquisitionDetailsMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTTableDynamicsMacro : public Module {
	const char *module;
	Attribute *CTTableDynamicsSequence;
public:
	            Macro_CTTableDynamicsMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTTableDynamicsMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTPositionMacro : public Module {
	const char *module;
	Attribute *CTPositionSequence;
public:
	            Macro_CTPositionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTPositionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTGeometryMacro : public Module {
	const char *module;
	Attribute *CTGeometrySequence;
public:
	            Macro_CTGeometryMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTGeometryMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTReconstructionMacro : public Module {
	const char *module;
	Attribute *CTReconstructionSequence;
public:
	            Macro_CTReconstructionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTReconstructionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTExposureMacro : public Module {
	const char *module;
	Attribute *CTExposureSequence;
public:
	            Macro_CTExposureMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTExposureMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTXRayDetailsMacro : public Module {
	const char *module;
	Attribute *CTXRayDetailsSequence;
public:
	            Macro_CTXRayDetailsMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTXRayDetailsMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTPixelValueTransformationMacro : public Module {
	const char *module;
	Attribute *PixelValueTransformationSequence;
public:
	            Macro_CTPixelValueTransformationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTPixelValueTransformationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_CTAdditionalXRaySourceMacro : public Module {
	const char *module;
	Attribute *CTAdditionalXRaySourceSequence;
public:
	            Macro_CTAdditionalXRaySourceMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "CTAdditionalXRaySourceMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsForEnhancedCTImage : public Module {
	const char *module;
	Attribute *SharedFunctionalGroupsSequence;
	Attribute *PerFrameFunctionalGroupsSequence;
public:
	            Module_MultiFrameFunctionalGroupsForEnhancedCTImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsForEnhancedCTImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_FramePointers : public Module {
	const char *module;
	Attribute *RepresentativeFrameNumber;
	Attribute *FrameNumbersOfInterest;
	Attribute *FrameOfInterestDescription;
	Attribute *FrameOfInterestType;
public:
	            Module_FramePointers(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "FramePointers"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_Mask : public Module {
	const char *module;
	Attribute *MaskSubtractionSequence;
	Attribute *RecommendedViewingMode;
public:
	            Module_Mask(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "Mask"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_DisplayShutter : public Module {
	const char *module;
public:
	            Module_DisplayShutter(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "DisplayShutter"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_Device : public Module {
	const char *module;
	Attribute *DeviceSequence;
public:
	            Module_Device(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "Device"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_Intervention : public Module {
	const char *module;
	Attribute *InterventionSequence;
public:
	            Module_Intervention(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "Intervention"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayImage : public Module {
	const char *module;
	Attribute *FrameIncrementPointer;
	Attribute *LossyImageCompression;
	Attribute *ImageType;
	Attribute *PixelIntensityRelationship;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *PixelRepresentation;
	Attribute *ScanOptions;
	Attribute *RWavePointer;
	Attribute *ReferencedImageSequence;
	Attribute *DerivationDescription;
	Attribute *AcquisitionDeviceProcessingDescription;
	Attribute *FrameLabelVector;
	Attribute *FrameDimensionPointer;
	Attribute *CalibrationImage;
public:
	            Module_XRayImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayAcquisition : public Module {
	const char *module;
	Attribute *KVP;
	Attribute *RadiationSetting;
	Attribute *XRayTubeCurrent;
	Attribute *XRayTubeCurrentInuA;
	Attribute *ExposureTime;
	Attribute *ExposureTimeInuS;
	Attribute *Exposure;
	Attribute *ExposureInuAs;
	Attribute *Grid;
	Attribute *AveragePulseWidth;
	Attribute *RadiationMode;
	Attribute *TypeOfFilters;
	Attribute *IntensifierSize;
	Attribute *FieldOfViewShape;
	Attribute *FieldOfViewDimensions;
	Attribute *ImagerPixelSpacing;
	Attribute *FocalSpot;
	Attribute *ImageAndFluoroscopyAreaDoseProduct;
public:
	            Module_XRayAcquisition(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayAcquisition"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayCollimator : public Module {
	const char *module;
	Attribute *CollimatorShape;
	Attribute *CollimatorLeftVerticalEdge;
	Attribute *CollimatorRightVerticalEdge;
	Attribute *CollimatorUpperHorizontalEdge;
	Attribute *CollimatorLowerHorizontalEdge;
	Attribute *CenterOfCircularCollimator;
	Attribute *RadiusOfCircularCollimator;
	Attribute *VerticesOfPolygonalCollimator;
public:
	            Module_XRayCollimator(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayCollimator"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayTable : public Module {
	const char *module;
	Attribute *TableMotion;
	Attribute *TableVerticalIncrement;
	Attribute *TableLongitudinalIncrement;
	Attribute *TableLateralIncrement;
	Attribute *TableAngle;
public:
	            Module_XRayTable(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayTable"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XAPositioner : public Module {
	const char *module;
	Attribute *DistanceSourceToPatient;
	Attribute *DistanceSourceToDetector;
	Attribute *EstimatedRadiographicMagnificationFactor;
	Attribute *PositionerMotion;
	Attribute *PositionerPrimaryAngle;
	Attribute *PositionerSecondaryAngle;
	Attribute *PositionerPrimaryAngleIncrement;
	Attribute *PositionerSecondaryAngleIncrement;
	Attribute *DetectorPrimaryAngle;
	Attribute *DetectorSecondaryAngle;
public:
	            Module_XAPositioner(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XAPositioner"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRFPositioner : public Module {
	const char *module;
	Attribute *DistanceSourceToDetector;
	Attribute *DistanceSourceToPatient;
	Attribute *EstimatedRadiographicMagnificationFactor;
	Attribute *ColumnAngulation;
public:
	            Module_XRFPositioner(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRFPositioner"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayTomographyAcquisition : public Module {
	const char *module;
	Attribute *TomoLayerHeight;
	Attribute *TomoAngle;
	Attribute *TomoTime;
	Attribute *TomoType;
	Attribute *TomoClass;
	Attribute *NumberOfTomosynthesisSourceImages;
public:
	            Module_XRayTomographyAcquisition(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayTomographyAcquisition"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XAXRFSeries : public Module {
	const char *module;
	Attribute *Modality;
	Attribute *SeriesNumber;
	Attribute *ReferencedPerformedProcedureStepSequence;
public:
	            Module_XAXRFSeries(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XAXRFSeries"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_EnhancedXAXRFImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *PlaneIdentification;
	Attribute *AcquisitionNumber;
	Attribute *AcquisitionDateTime;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *SamplesPerPixel;
	Attribute *PixelRepresentation;
	Attribute *PhotometricInterpretation;
	Attribute *AcquisitionProtocolName;
	Attribute *AcquisitionProtocolDescription;
	Attribute *ScanOptions;
	Attribute *ContentQualification;
	Attribute *PatientOrientationCodeSequence;
	Attribute *PatientGantryRelationshipCodeSequence;
	Attribute *ExaminedBodyThickness;
	Attribute *BurnedInAnnotation;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *LossyImageCompressionMethod;
	Attribute *ReferencedOtherPlaneSequence;
	Attribute *ReferencedImageEvidenceSequence;
	Attribute *SourceImageEvidenceSequence;
	Attribute *ReferencedInstanceSequence;
	Attribute *ImageComments;
	Attribute *QualityControlImage;
	Attribute *IconImageSequence;
	Attribute *PresentationLUTShape;
public:
	            Module_EnhancedXAXRFImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "EnhancedXAXRFImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XAXRFAcquisition : public Module {
	const char *module;
	Attribute *KVP;
	Attribute *RadiationSetting;
	Attribute *XRayTubeCurrentInmA;
	Attribute *ExposureTimeInms;
	Attribute *ExposureInmAs;
	Attribute *AveragePulseWidth;
	Attribute *AcquisitionDuration;
	Attribute *RadiationMode;
	Attribute *FocalSpot;
	Attribute *AnodeTargetMaterial;
	Attribute *RectificationType;
	Attribute *XRayReceptorType;
	Attribute *ImagerPixelSpacing;
	Attribute *DistanceReceptorPlaneToDetectorHousing;
	Attribute *PositionerType;
	Attribute *CArmPositionerTabletopRelationship;
	Attribute *AcquiredImageAreaDoseProduct;
public:
	            Module_XAXRFAcquisition(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XAXRFAcquisition"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayImageIntensifier : public Module {
	const char *module;
	Attribute *IntensifierSize;
	Attribute *IntensifierActiveShape;
	Attribute *IntensifierActiveDimensions;
public:
	            Module_XRayImageIntensifier(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayImageIntensifier"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRayDetector : public Module {
	const char *module;
	Attribute *PhysicalDetectorSize;
	Attribute *PositionOfIsocenterProjection;
public:
	            Module_XRayDetector(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayDetector"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XAXRFFrameCharacteristicsMacro : public Module {
	const char *module;
	Attribute *XAXRFFrameCharacteristicsSequence;
public:
	            Macro_XAXRFFrameCharacteristicsMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XAXRFFrameCharacteristicsMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayFieldOfViewMacro : public Module {
	const char *module;
	Attribute *FieldOfViewSequence;
public:
	            Macro_XRayFieldOfViewMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayFieldOfViewMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayExposureControlSensingRegionsMacro : public Module {
	const char *module;
	Attribute *ExposureControlSensingRegionsSequence;
public:
	            Macro_XRayExposureControlSensingRegionsMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayExposureControlSensingRegionsMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XAXRFFramePixelDataPropertiesMacro : public Module {
	const char *module;
	Attribute *FramePixelDataPropertiesSequence;
public:
	            Macro_XAXRFFramePixelDataPropertiesMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XAXRFFramePixelDataPropertiesMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayFrameDetectorParametersMacro : public Module {
	const char *module;
	Attribute *FrameDetectorParametersSequence;
public:
	            Macro_XRayFrameDetectorParametersMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayFrameDetectorParametersMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayCalibrationDeviceUsageMacro : public Module {
	const char *module;
	Attribute *CalibrationSequence;
public:
	            Macro_XRayCalibrationDeviceUsageMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayCalibrationDeviceUsageMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayObjectThicknessMacro : public Module {
	const char *module;
	Attribute *ObjectThicknessSequence;
public:
	            Macro_XRayObjectThicknessMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayObjectThicknessMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayFrameAcquisitionMacro : public Module {
	const char *module;
	Attribute *FrameAcquisitionSequence;
public:
	            Macro_XRayFrameAcquisitionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayFrameAcquisitionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayProjectionPixelCalibrationMacro : public Module {
	const char *module;
	Attribute *ProjectionPixelCalibrationSequence;
public:
	            Macro_XRayProjectionPixelCalibrationMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayProjectionPixelCalibrationMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayPositionerMacro : public Module {
	const char *module;
	Attribute *PositionerPositionSequence;
public:
	            Macro_XRayPositionerMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayPositionerMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayTablePositionMacro : public Module {
	const char *module;
	Attribute *TablePositionSequence;
public:
	            Macro_XRayTablePositionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayTablePositionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayCollimatorMacro : public Module {
	const char *module;
	Attribute *CollimatorShapeSequence;
public:
	            Macro_XRayCollimatorMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayCollimatorMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayIsocenterReferenceSystemMacro : public Module {
	const char *module;
	Attribute *IsocenterReferenceSystemSequence;
public:
	            Macro_XRayIsocenterReferenceSystemMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayIsocenterReferenceSystemMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRayGeometryMacro : public Module {
	const char *module;
	Attribute *XRayGeometrySequence;
public:
	            Macro_XRayGeometryMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRayGeometryMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XAXRFMultiFramePresentation : public Module {
	const char *module;
	Attribute *PreferredPlaybackSequencing;
	Attribute *FrameDisplaySequence;
public:
	            Module_XAXRFMultiFramePresentation(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XAXRFMultiFramePresentation"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsForEnhancedXAImage : public Module {
	const char *module;
	Attribute *SharedFunctionalGroupsSequence;
	Attribute *PerFrameFunctionalGroupsSequence;
public:
	            Module_MultiFrameFunctionalGroupsForEnhancedXAImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsForEnhancedXAImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsForEnhancedXRFImage : public Module {
	const char *module;
	Attribute *SharedFunctionalGroupsSequence;
	Attribute *PerFrameFunctionalGroupsSequence;
public:
	            Module_MultiFrameFunctionalGroupsForEnhancedXRFImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsForEnhancedXRFImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsForXRay3DAngiographicImage : public Module {
	const char *module;
	Attribute *SharedFunctionalGroupsSequence;
	Attribute *PerFrameFunctionalGroupsSequence;
public:
	            Module_MultiFrameFunctionalGroupsForXRay3DAngiographicImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsForXRay3DAngiographicImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_MultiFrameFunctionalGroupsForXRay3DCraniofacialImage : public Module {
	const char *module;
	Attribute *SharedFunctionalGroupsSequence;
	Attribute *PerFrameFunctionalGroupsSequence;
public:
	            Module_MultiFrameFunctionalGroupsForXRay3DCraniofacialImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "MultiFrameFunctionalGroupsForXRay3DCraniofacialImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRay3DImage : public Module {
	const char *module;
	Attribute *ImageType;
	Attribute *BitsAllocated;
	Attribute *BitsStored;
	Attribute *HighBit;
	Attribute *SamplesPerPixel;
	Attribute *PhotometricInterpretation;
	Attribute *ContentQualification;
	Attribute *BurnedInAnnotation;
	Attribute *LossyImageCompression;
	Attribute *LossyImageCompressionRatio;
	Attribute *LossyImageCompressionMethod;
	Attribute *ReferencedImageEvidenceSequence;
	Attribute *ImageComments;
	Attribute *QualityControlImage;
	Attribute *IconImageSequence;
	Attribute *PresentationLUTShape;
public:
	            Module_XRay3DImage(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRay3DImage"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRay3DAngiographicImageContributingSources : public Module {
	const char *module;
	Attribute *ContributingSourcesSequence;
public:
	            Module_XRay3DAngiographicImageContributingSources(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRay3DAngiographicImageContributingSources"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRay3DCraniofacialImageContributingSources : public Module {
	const char *module;
	Attribute *ContributingSourcesSequence;
public:
	            Module_XRay3DCraniofacialImageContributingSources(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRay3DCraniofacialImageContributingSources"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRay3DGeneralSharedAcquisitionMacro : public Module {
	const char *module;
	Attribute *SourceImageEvidenceSequence;
	Attribute *FieldOfViewShape;
	Attribute *FieldOfViewDimensionsInFloat;
	Attribute *FieldOfViewOrigin;
	Attribute *FieldOfViewRotation;
	Attribute *FieldOfViewHorizontalFlip;
	Attribute *Grid;
	Attribute *XRayReceptorType;
	Attribute *KVP;
	Attribute *XRayTubeCurrentInmA;
	Attribute *ExposureTimeInms;
	Attribute *ExposureInmAs;
	Attribute *ContrastBolusAgent;
	Attribute *ContrastBolusAgentSequence;
	Attribute *StartAcquisitionDateTime;
	Attribute *EndAcquisitionDateTime;
public:
	            Macro_XRay3DGeneralSharedAcquisitionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRay3DGeneralSharedAcquisitionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRay3DGeneralPerProjectionAcquisitionMacro : public Module {
	const char *module;
	Attribute *KVP;
	Attribute *XRayTubeCurrentInmA;
	Attribute *FrameAcquisitionDuration;
	Attribute *CollimatorShape;
	Attribute *CollimatorLeftVerticalEdge;
	Attribute *CollimatorRightVerticalEdge;
	Attribute *CollimatorUpperHorizontalEdge;
	Attribute *CollimatorLowerHorizontalEdge;
	Attribute *CenterOfCircularCollimator;
	Attribute *RadiusOfCircularCollimator;
	Attribute *VerticesOfPolygonalCollimator;
public:
	            Macro_XRay3DGeneralPerProjectionAcquisitionMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRay3DGeneralPerProjectionAcquisitionMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRay3DAngiographicAcquisition : public Module {
	const char *module;
	Attribute *XRay3DAcquisitionSequence;
public:
	            Module_XRay3DAngiographicAcquisition(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRay3DAngiographicAcquisition"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRay3DCraniofacialAcquisition : public Module {
	const char *module;
	Attribute *XRay3DAcquisitionSequence;
public:
	            Module_XRay3DCraniofacialAcquisition(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRay3DCraniofacialAcquisition"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Module_XRay3DReconstruction : public Module {
	const char *module;
	Attribute *XRay3DReconstructionSequence;
public:
	            Module_XRay3DReconstruction(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRay3DReconstruction"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};

class Macro_XRay3DFrameTypeMacro : public Module {
	const char *module;
	Attribute *XRay3DFrameTypeSequence;
public:
	            Macro_XRay3DFrameTypeMacro(AttributeList *list,InformationEntity ie);
	const char *identify(void) const { return "XRay3DFrameTypeMacro"; }
	void        write(TextOutputStream& stream,AttributeList *list,ElementDictionary *dict) const ;
	bool        verify(AttributeList *list,AttributeList *parentlist,AttributeList *rootlist,bool verbose,TextOutputStream& log,ElementDictionary *dict) const;
};


#endif /* __Header_modulec__ */
