#! /bin/bash
#
#  Script to build an OVJ release.
#  Typically, one would make a directory, e.g., at $HOME/ovjbuild. Put the
#  ovjTools into that directory and then copy the bin directory from the
#  ovjTools directory to the ovjbuild directory with the command
#  cp -r ovjTools/bin .
#
#  ovjBuildDir    defines where the git-repo will be built.
#  workspacedir   used by ovjdvd and defines where the DVD images will be built.
#  OVJ_TOOLS      parameter should point to the ovjTools directory. The ovjTools
#                 directory does not necessarily need to be in the same directory as the
#                 git-repo directory, although that may be a convenient place.
#  dvdBuildName1  name of the DDR / DD2 image
#  dvdBuildName2  name of the MI image
#  dvdCopyDir1    where a copy of the OpenVnmrJ DDR / DD2 DVD image will be put.
#  dvdCopyDir2    where a copy of the OpenVnmrJ MI DVD image will be put.
#  set dvdCopyDir1 and / or dvdCopyDir2 to null string to avoid the final copy
#  dvdCopyName1   name of the OVJ DDR / DD2 copy
#  dvdCopyName2   name of the OVJ MI copy
#  buildOVJ       whether the OVJ DDR / DD2 DVD image will be made
#  buildOVJMI     whether the OVJMI DVD image will be made
#
#  doScons=yes    to run scons
#  doScons=no     to not run scons. This also avoids removing directories
#                 and does not change the git repo.
#                 Use this if you are just making a DVD from pre-built files
#  doGitClone=yes     to get a new OpenVnmrJ repo.
#  doGitClone=rebuild to do a new checkout of OpenVnmrJ "src"
#  doGitClone=pull    to pull recent changes to the OpenVnmrJ repo and
#                     do a new checkout of "src"
#  doGitClone=no      to leave the current ovjTools repo alone
#  doGitToolsClone=yes     to get a new ovjTools repo.
#  doGitToolsClone=rebuild to do a new checkout of "src"
#  doGitToolsClone=pull    to pull recent changes to the ovjTools repo and
#                          do a new checkout of "src"
#  doGitToolsClone=no      to leave the current ovjTools repo alone
#  mail_list      addresses to email status of the build
#  gitURL         URL for git repo.
#  ovjConsole     flag to tell whether to include console software
#  sconsJoption   helps speed up the process. Typical value is #CPUs+1
#  gitRelease      Specify what to build
#
# set -x

if [ "$(uname -s)" = "Darwin" ]; then
  filename=`perl -e 'use Cwd "abs_path";print abs_path(shift)' $0`
  ovjBuildDir=`dirname "${filename}"`
  timestamp=`date +%s`
  if [ -d "${ovjBuildDir}" ]; then
    touch "${ovjBuildDir}"/TESTFILE-$timestamp "${ovjBuildDir}"/testfile-$timestamp
    rm "${ovjBuildDir}"/TESTFILE-$timestamp
    if [ -f "${ovjBuildDir}"/testfile-$timestamp ]; then
      rm "${ovjBuildDir}"/testfile-$timestamp
    else 
      echo "Case insensitive file system. Watch out for biosolidspack experiments"
    fi
  fi
  export osxflags=" -mmacosx-version-min=10.13 -Wno-error=implicit-function-declaration -Wno-error=implicit-int -Wno-error=incompatible-function-pointer-types -Wno-error=int-conversion"
  export MACOSX_DEPLOYMENT_TARGET=10.13
  export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
else
  ovjBuildDir=`dirname "$(readlink -f $0))"`
fi
ovjBuildDir=`dirname "${ovjBuildDir}"`
workspacedir=$ovjBuildDir
OVJ_TOOLS=$ovjBuildDir/ovjTools

dvdCopyDir1=
dvdCopyDir2=

shortDate=`date +%F`
dvdBuildName1=dvdimageOVJ
dvdBuildName2=dvdimageOVJMI
dvdCopyName1=OVJ_$shortDate
dvdCopyName2=OVJ_MI_$shortDate
if [ "$(uname -s)" = "Darwin" ]; then
  nprocs=$(sysctl -n hw.ncpu)
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
  nprocs=$(nproc)   
fi
sconsJoption=$(( nprocs + 1 ))

doGitClone=pull
if [ ! -d "${ovjBuildDir}/OpenVnmrJ" ]
then
   doGitClone=yes
fi
doGitToolsClone=pull
if [ ! -d "${ovjBuildDir}/ovjTools" ]
then
   doGitToolsClone=yes
fi

gitURL='https://github.com/OpenVnmrJ'
gitSSH='ssh://git@github.com/userName'
gitSSH=''
# If gitSSH is an empty string, the gitURL is used
# If you plan to commit changes to the OpenVnmrJ project,
# you should use the ssh protocol on your fork of the OpenVnmrJ project.
# Replace the userName string in gitSSH with your github account name
# and comment out the second gitSSH line (gitSSH='')

gitRelease='master'
# Uncomment one of the following to build a specific release
# OpenVnmrJ 1.1A and 2.1A require CentOS 6 with scons version 2
# gitRelease='OpenVnmrJ_1.1A' 
# gitRelease='OpenVnmrJ_2.1A'
# gitRelease='OpenVnmrJ_3.1A'

doScons=yes
buildOVJ=yes    # Build for Direct-Drive (VnmrS/DD2/ProPulse)
buildOVJMI=yes  # Build for Mercury/Inova
ovjConsole=yes  # include console software

# Potential optional set of values
# doGitClone=yes
# doGitClone=rebuild
# doGitClone=pull
# doGitClone=no
# doGitToolsClone=yes
# doGitToolsClone=rebuild
# doGitToolsClone=pull
# doGitToolsClone=no
# mail_list=""
# doScons=no
# buildOVJ=no
# buildOVJMI=no
# ovjConsole=no
# sconsJoption=5

date=`date +%F_%T`
if [ ! -d "${ovjBuildDir}/logs" ]
then
   mkdir -p "${ovjBuildDir}/logs"
fi
ovjLogFile="${ovjBuildDir}/logs/makeovj.$date"
rm -f "${ovjBuildDir}/logs/makeovjlog"
(cd "${ovjBuildDir}/logs" && ln -s makeovj.$date makeovjlog)
cd "${ovjBuildDir}"
export ovjBuildDir workspacedir OVJ_TOOLS dvdCopyDir1 dvdCopyDir2 dvdBuildName1 dvdBuildName2 dvdCopyName1 dvdCopyName2 ovjLogFile doScons doGitClone mail_list gitURL gitSSH gitRelease buildOVJ buildOVJMI ovjConsole sconsJoption osxflags doGitToolsClone
"${ovjBuildDir}/bin/makeovj" > "${ovjLogFile}" 2>&1

